;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 22/06/2022 17:46:19
;----------------------------------------------

;Address Opcode 	ASM
____SysVT:
0x0000	0x2FFC2000  	536883196
0x0004	0x0A450000  	2629
0x0008	0x0B190000  	2841
0x000C	0x0B190000  	2841
0x0010	0x0B190000  	2841
0x0014	0x0B190000  	2841
0x0018	0x0B190000  	2841
0x001C	0x0B190000  	2841
0x0020	0x0B190000  	2841
0x0024	0x0B190000  	2841
0x0028	0x0B190000  	2841
0x002C	0x0B190000  	2841
0x0030	0x0B190000  	2841
0x0034	0x0B190000  	2841
0x0038	0x0B190000  	2841
0x003C	0x0B190000  	2841
0x0040	0x0B190000  	2841
0x0044	0x0B190000  	2841
0x0048	0x0B190000  	2841
0x004C	0x0B190000  	2841
0x0050	0x0B190000  	2841
0x0054	0x0B190000  	2841
0x0058	0x0B190000  	2841
0x005C	0x0B190000  	2841
0x0060	0x0B190000  	2841
0x0064	0x0B190000  	2841
0x0068	0x0B190000  	2841
0x006C	0x0B190000  	2841
0x0070	0x0B190000  	2841
0x0074	0x0B190000  	2841
0x0078	0x0B190000  	2841
0x007C	0x0B190000  	2841
0x0080	0x0B190000  	2841
0x0084	0x0B190000  	2841
0x0088	0x0B190000  	2841
0x008C	0x0B190000  	2841
0x0090	0x0B190000  	2841
0x0094	0x0B190000  	2841
0x0098	0x0B190000  	2841
0x009C	0x0B190000  	2841
0x00A0	0x0B190000  	2841
0x00A4	0x0B190000  	2841
0x00A8	0x0B190000  	2841
0x00AC	0x0B190000  	2841
0x00B0	0x0B190000  	2841
0x00B4	0x0B190000  	2841
0x00B8	0x0B190000  	2841
0x00BC	0x0B190000  	2841
0x00C0	0x0B190000  	2841
0x00C4	0x0B190000  	2841
0x00C8	0x0B190000  	2841
0x00CC	0x0B190000  	2841
0x00D0	0x0B190000  	2841
0x00D4	0x09BD0000  	2493
0x00D8	0x0A910000  	2705
0x00DC	0x0B190000  	2841
0x00E0	0x0B190000  	2841
0x00E4	0x0B190000  	2841
0x00E8	0x0B190000  	2841
0x00EC	0x0B190000  	2841
0x00F0	0x0B190000  	2841
0x00F4	0x0B190000  	2841
0x00F8	0x0B190000  	2841
0x00FC	0x0B190000  	2841
0x0100	0x0B190000  	2841
0x0104	0x0B190000  	2841
0x0108	0x0B190000  	2841
0x010C	0x0B190000  	2841
0x0110	0x0B190000  	2841
0x0114	0x0B190000  	2841
0x0118	0x0B190000  	2841
0x011C	0x0B190000  	2841
0x0120	0x0B190000  	2841
0x0124	0x0B190000  	2841
0x0128	0x0B190000  	2841
0x012C	0x0B190000  	2841
0x0130	0x0B190000  	2841
0x0134	0x0B190000  	2841
0x0138	0x0B190000  	2841
0x013C	0x0B190000  	2841
0x0140	0x0B190000  	2841
0x0144	0x0B190000  	2841
0x0148	0x0B190000  	2841
0x014C	0x0B190000  	2841
0x0150	0x0B190000  	2841
0x0154	0x0B190000  	2841
0x0158	0x0B190000  	2841
0x015C	0x0B190000  	2841
0x0160	0x0B190000  	2841
0x0164	0x0B190000  	2841
0x0168	0x0B190000  	2841
0x016C	0x0B190000  	2841
0x0170	0x0B190000  	2841
0x0174	0x0B190000  	2841
0x0178	0x0B190000  	2841
0x017C	0x0B190000  	2841
0x0180	0x0B190000  	2841
0x0184	0x0B190000  	2841
; end of ____SysVT
_main:
;main.c, 9 :: 		int main(void)
0x0A44	0xB081    SUB	SP, SP, #4
0x0A46	0xF000F86B  BL	2848
0x0A4A	0xF000F80B  BL	2660
0x0A4E	0xF000F98B  BL	3432
0x0A52	0xF000F8E7  BL	3108
0x0A56	0xF000F947  BL	3304
;main.c, 13 :: 		SystemConfig();
0x0A5A	0xF7FFFF3F  BL	_SystemConfig+0
;main.c, 16 :: 		while (1)
L_main0:
;main.c, 19 :: 		}
0x0A5E	0xE7FE    B	L_main0
;main.c, 22 :: 		}
L_end_main:
L__main_end_loop:
0x0A60	0xE7FE    B	L__main_end_loop
; end of _main
___FillZeros:
;__Lib_System_3XX.c, 64 :: 		void __FillZeros(){
0x0980	0xB081    SUB	SP, SP, #4
;__Lib_System_3XX.c, 66 :: 		MOV.W R9, #0
0x0982	0xF04F0900  MOV	R9, #0
;__Lib_System_3XX.c, 67 :: 		MOV.W R12, #0
0x0986	0xF04F0C00  MOV	R12, #0
;__Lib_System_3XX.c, 68 :: 		CMP.W   SP, R10
0x098A	0xEBBD0F0A  CMP	SP, R10, LSL #0
;__Lib_System_3XX.c, 69 :: 		BGT  L_loopFZs
0x098E	0xDC04    BGT	L_loopFZs
;__Lib_System_3XX.c, 70 :: 		CMP.W   SP, R11
0x0990	0xEBBD0F0B  CMP	SP, R11, LSL #0
;__Lib_System_3XX.c, 71 :: 		BLT  L_loopFZs
0x0994	0xDB01    BLT	L_loopFZs
;__Lib_System_3XX.c, 72 :: 		MOV R12, R10
0x0996	0x46D4    MOV	R12, R10
;__Lib_System_3XX.c, 73 :: 		MOV R10, SP
0x0998	0x46EA    MOV	R10, SP
;__Lib_System_3XX.c, 74 :: 		L_loopFZs:
L_loopFZs:
;__Lib_System_3XX.c, 75 :: 		STR.W       R9, [R11], #4
0x099A	0xF84B9B04  STR	R9, [R11], #4
;__Lib_System_3XX.c, 76 :: 		CMP.W        R11, R10
0x099E	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_3XX.c, 77 :: 		BNE L_loopFZs
0x09A2	0xD1FA    BNE	L_loopFZs
;__Lib_System_3XX.c, 78 :: 		CMP.W   R12, R10
0x09A4	0xEBBC0F0A  CMP	R12, R10, LSL #0
;__Lib_System_3XX.c, 79 :: 		BLE   L_norep
0x09A8	0xDD05    BLE	L_norep
;__Lib_System_3XX.c, 80 :: 		MOV   R10, R12
0x09AA	0x46E2    MOV	R10, R12
;__Lib_System_3XX.c, 81 :: 		LDR   R11, [R9]
0x09AC	0xF8D9B000  LDR	R11, [R9, #0]
;__Lib_System_3XX.c, 82 :: 		ADD   R11, R11,#4
0x09B0	0xF10B0B04  ADD	R11, R11, #4
;__Lib_System_3XX.c, 83 :: 		B  L_loopFZs
0x09B4	0xE7F1    B	L_loopFZs
;__Lib_System_3XX.c, 84 :: 		L_norep:
L_norep:
;__Lib_System_3XX.c, 86 :: 		}
L_end___FillZeros:
0x09B6	0xB001    ADD	SP, SP, #4
0x09B8	0x4770    BX	LR
; end of ___FillZeros
_SystemConfig:
;drv_app.c, 14 :: 		void SystemConfig(void)
0x08DC	0xB081    SUB	SP, SP, #4
0x08DE	0xF8CDE000  STR	LR, [SP, #0]
;drv_app.c, 18 :: 		MX_GPIO_Init();
0x08E2	0xF7FFFF8D  BL	drv_app_MX_GPIO_Init+0
;drv_app.c, 19 :: 		MX_ADC1_Init();
0x08E6	0xF7FFFF9D  BL	drv_app_MX_ADC1_Init+0
;drv_app.c, 20 :: 		MX_UART2_Init();
0x08EA	0xF7FFFF97  BL	drv_app_MX_UART2_Init+0
;drv_app.c, 22 :: 		}
L_end_SystemConfig:
0x08EE	0xF8DDE000  LDR	LR, [SP, #0]
0x08F2	0xB001    ADD	SP, SP, #4
0x08F4	0x4770    BX	LR
; end of _SystemConfig
drv_app_MX_GPIO_Init:
;drv_app.c, 28 :: 		static void MX_GPIO_Init(void)
0x0800	0xB081    SUB	SP, SP, #4
0x0802	0xF8CDE000  STR	LR, [SP, #0]
;drv_app.c, 32 :: 		digital_in_init( &LD2, PB3 );
0x0806	0x2113    MOVS	R1, #19
0x0808	0x4803    LDR	R0, [PC, #12]
0x080A	0xF7FFFF11  BL	_digital_in_init+0
;drv_app.c, 35 :: 		}
L_end_MX_GPIO_Init:
0x080E	0xF8DDE000  LDR	LR, [SP, #0]
0x0812	0xB001    ADD	SP, SP, #4
0x0814	0x4770    BX	LR
0x0816	0xBF00    NOP
0x0818	0x00842000  	_LD2+0
; end of drv_app_MX_GPIO_Init
_digital_in_init:
;drv_digital_in.c, 46 :: 		err_t digital_in_init( digital_in_t *in, pin_name_t name )
0x0630	0xB081    SUB	SP, SP, #4
0x0632	0xF8CDE000  STR	LR, [SP, #0]
;drv_digital_in.c, 48 :: 		if ( HAL_PIN_NC == name )
0x0636	0xF64F72FF  MOVW	R2, #65535
0x063A	0x4291    CMP	R1, R2
0x063C	0xD102    BNE	L_digital_in_init0
;drv_digital_in.c, 50 :: 		return DIGITAL_IN_UNSUPPORTED_PIN;
0x063E	0xF04F30FF  MOV	R0, #-1
0x0642	0xE003    B	L_end_digital_in_init
;drv_digital_in.c, 51 :: 		}
L_digital_in_init0:
;drv_digital_in.c, 53 :: 		hal_gpio_configure_pin( &in->pin, name, GPIO_DIGITAL_INPUT );
0x0644	0x2200    MOVS	R2, #0
0x0646	0xF7FFFFBF  BL	_hal_gpio_configure_pin+0
;drv_digital_in.c, 54 :: 		return DIGITAL_IN_SUCCESS;
0x064A	0x2000    MOVS	R0, #0
;drv_digital_in.c, 55 :: 		}
L_end_digital_in_init:
0x064C	0xF8DDE000  LDR	LR, [SP, #0]
0x0650	0xB001    ADD	SP, SP, #4
0x0652	0x4770    BX	LR
; end of _digital_in_init
_hal_gpio_configure_pin:
;hal_gpio.c, 47 :: 		hal_gpio_direction_t direction )
0x05C8	0xB081    SUB	SP, SP, #4
0x05CA	0xF8CDE000  STR	LR, [SP, #0]
;hal_gpio.c, 49 :: 		hal_ll_gpio_configure_pin( (hal_ll_gpio_pin_t *)pin, name, (hal_ll_gpio_direction_t)direction );
0x05CE	0xF7FFFF57  BL	_hal_ll_gpio_configure_pin+0
;hal_gpio.c, 50 :: 		}
L_end_hal_gpio_configure_pin:
0x05D2	0xF8DDE000  LDR	LR, [SP, #0]
0x05D6	0xB001    ADD	SP, SP, #4
0x05D8	0x4770    BX	LR
; end of _hal_gpio_configure_pin
_hal_ll_gpio_configure_pin:
;hal_ll_gpio.c, 51 :: 		void hal_ll_gpio_configure_pin(hal_ll_gpio_pin_t *pin, hal_ll_pin_name_t name, hal_ll_gpio_direction_t direction)
0x0480	0xB086    SUB	SP, SP, #24
0x0482	0xF8CDE000  STR	LR, [SP, #0]
0x0486	0xF8AD1008  STRH	R1, [SP, #8]
0x048A	0x4601    MOV	R1, R0
0x048C	0xF88D200C  STRB	R2, [SP, #12]
;hal_ll_gpio.c, 53 :: 		pin->base = (hal_ll_gpio_base_t)hal_ll_gpio_port_base(hal_ll_gpio_port_index(name));
0x0490	0x460B    MOV	R3, R1
0x0492	0x9305    STR	R3, [SP, #20]
0x0494	0x9101    STR	R1, [SP, #4]
0x0496	0xF8BD0008  LDRH	R0, [SP, #8]
0x049A	0xF7FFFFEB  BL	_hal_ll_gpio_port_index+0
0x049E	0xF7FFFFB9  BL	_hal_ll_gpio_port_base+0
0x04A2	0x9901    LDR	R1, [SP, #4]
0x04A4	0x9B05    LDR	R3, [SP, #20]
0x04A6	0x6018    STR	R0, [R3, #0]
;hal_ll_gpio.c, 54 :: 		pin->mask = hal_ll_gpio_pin_mask(name);
0x04A8	0x1D0B    ADDS	R3, R1, #4
0x04AA	0x9305    STR	R3, [SP, #20]
0x04AC	0x9101    STR	R1, [SP, #4]
0x04AE	0xF8BD0008  LDRH	R0, [SP, #8]
0x04B2	0xF7FFFFB9  BL	_hal_ll_gpio_pin_mask+0
0x04B6	0x9901    LDR	R1, [SP, #4]
0x04B8	0x9B05    LDR	R3, [SP, #20]
0x04BA	0x8018    STRH	R0, [R3, #0]
;hal_ll_gpio.c, 56 :: 		if ( direction == HAL_LL_GPIO_DIGITAL_INPUT)
0x04BC	0xF89D300C  LDRB	R3, [SP, #12]
0x04C0	0xB943    CBNZ	R3, L_hal_ll_gpio_configure_pin0
;hal_ll_gpio.c, 57 :: 		hal_ll_gpio_digital_input(pin->base, pin->mask);
0x04C2	0x1D0B    ADDS	R3, R1, #4
0x04C4	0x881B    LDRH	R3, [R3, #0]
0x04C6	0xB29C    UXTH	R4, R3
0x04C8	0x680B    LDR	R3, [R1, #0]
0x04CA	0xB2A1    UXTH	R1, R4
0x04CC	0x4618    MOV	R0, R3
0x04CE	0xF7FFFFC5  BL	_hal_ll_gpio_digital_input+0
0x04D2	0xE007    B	L_hal_ll_gpio_configure_pin1
L_hal_ll_gpio_configure_pin0:
;hal_ll_gpio.c, 59 :: 		hal_ll_gpio_digital_output(pin->base, pin->mask);
0x04D4	0x1D0B    ADDS	R3, R1, #4
0x04D6	0x881B    LDRH	R3, [R3, #0]
0x04D8	0xB29C    UXTH	R4, R3
0x04DA	0x680B    LDR	R3, [R1, #0]
0x04DC	0xB2A1    UXTH	R1, R4
0x04DE	0x4618    MOV	R0, R3
0x04E0	0xF7FFFFB0  BL	_hal_ll_gpio_digital_output+0
L_hal_ll_gpio_configure_pin1:
;hal_ll_gpio.c, 60 :: 		}
L_end_hal_ll_gpio_configure_pin:
0x04E4	0xF8DDE000  LDR	LR, [SP, #0]
0x04E8	0xB006    ADD	SP, SP, #24
0x04EA	0x4770    BX	LR
; end of _hal_ll_gpio_configure_pin
_hal_ll_gpio_port_index:
;hal_ll_gpio_port.c, 265 :: 		uint8_t hal_ll_gpio_port_index( hal_ll_pin_name_t name )
0x0474	0xB081    SUB	SP, SP, #4
;hal_ll_gpio_port.c, 267 :: 		return ( uint8_t )name / PORT_SIZE;
0x0476	0xB2C1    UXTB	R1, R0
0x0478	0x0909    LSRS	R1, R1, #4
0x047A	0xB2C8    UXTB	R0, R1
;hal_ll_gpio_port.c, 268 :: 		}
L_end_hal_ll_gpio_port_index:
0x047C	0xB001    ADD	SP, SP, #4
0x047E	0x4770    BX	LR
; end of _hal_ll_gpio_port_index
_hal_ll_gpio_port_base:
;hal_ll_gpio_port.c, 275 :: 		uint32_t hal_ll_gpio_port_base( hal_ll_port_name_t name )
0x0414	0xB081    SUB	SP, SP, #4
;hal_ll_gpio_port.c, 277 :: 		return _hal_ll_gpio_port_base[ name ];
0x0416	0x0082    LSLS	R2, R0, #2
0x0418	0x4902    LDR	R1, [PC, #8]
0x041A	0x1889    ADDS	R1, R1, R2
0x041C	0x6809    LDR	R1, [R1, #0]
0x041E	0x4608    MOV	R0, R1
;hal_ll_gpio_port.c, 278 :: 		}
L_end_hal_ll_gpio_port_base:
0x0420	0xB001    ADD	SP, SP, #4
0x0422	0x4770    BX	LR
0x0424	0x0CBC0000  	hal_ll_gpio_port__hal_ll_gpio_port_base+0
; end of _hal_ll_gpio_port_base
_hal_ll_gpio_pin_mask:
;hal_ll_gpio_port.c, 270 :: 		uint32_t hal_ll_gpio_pin_mask( hal_ll_pin_name_t name )
0x0428	0xB081    SUB	SP, SP, #4
0x042A	0xF8CDE000  STR	LR, [SP, #0]
;hal_ll_gpio_port.c, 272 :: 		return ( ( uint32_t )0x01 << hal_ll_gpio_pin_index( name ) );
0x042E	0xF7FFFED1  BL	hal_ll_gpio_port_hal_ll_gpio_pin_index+0
0x0432	0xF04F0101  MOV	R1, #1
0x0436	0x4081    LSLS	R1, R0
0x0438	0x4608    MOV	R0, R1
;hal_ll_gpio_port.c, 273 :: 		}
L_end_hal_ll_gpio_pin_mask:
0x043A	0xF8DDE000  LDR	LR, [SP, #0]
0x043E	0xB001    ADD	SP, SP, #4
0x0440	0x4770    BX	LR
; end of _hal_ll_gpio_pin_mask
hal_ll_gpio_port_hal_ll_gpio_pin_index:
;hal_ll_gpio_port.c, 260 :: 		static uint8_t hal_ll_gpio_pin_index( hal_ll_pin_name_t name )
0x01D4	0xB081    SUB	SP, SP, #4
;hal_ll_gpio_port.c, 262 :: 		return ( uint8_t )name % PORT_SIZE;
0x01D6	0xB2C1    UXTB	R1, R0
0x01D8	0xF001010F  AND	R1, R1, #15
0x01DC	0xB2C8    UXTB	R0, R1
;hal_ll_gpio_port.c, 263 :: 		}
L_end_hal_ll_gpio_pin_index:
0x01DE	0xB001    ADD	SP, SP, #4
0x01E0	0x4770    BX	LR
; end of hal_ll_gpio_port_hal_ll_gpio_pin_index
_hal_ll_gpio_digital_input:
;hal_ll_gpio_port.c, 285 :: 		void hal_ll_gpio_digital_input( uint32_t *port, uint16_t pin_mask )
0x045C	0xB081    SUB	SP, SP, #4
0x045E	0xF8CDE000  STR	LR, [SP, #0]
;hal_ll_gpio_port.c, 287 :: 		hal_ll_gpio_config( port, pin_mask, GPIO_CFG_DIGITAL_INPUT );
0x0462	0xF04F0242  MOV	R2, #66
0x0466	0xF7FFFEBD  BL	hal_ll_gpio_port_hal_ll_gpio_config+0
;hal_ll_gpio_port.c, 288 :: 		}
L_end_hal_ll_gpio_digital_input:
0x046A	0xF8DDE000  LDR	LR, [SP, #0]
0x046E	0xB001    ADD	SP, SP, #4
0x0470	0x4770    BX	LR
; end of _hal_ll_gpio_digital_input
hal_ll_gpio_port_hal_ll_gpio_config:
;hal_ll_gpio_port.c, 396 :: 		static void hal_ll_gpio_config( uint32_t *port, uint16_t pin_mask, uint32_t config )
0x01E4	0xB082    SUB	SP, SP, #8
0x01E6	0xF8CDE000  STR	LR, [SP, #0]
0x01EA	0xB28D    UXTH	R5, R1
0x01EC	0x4617    MOV	R7, R2
;hal_ll_gpio_port.c, 398 :: 		uint32_t pin_pos       = 0;
;hal_ll_gpio_port.c, 399 :: 		uint32_t pos           = 0;
;hal_ll_gpio_port.c, 400 :: 		uint32_t current_pin   = 0;
;hal_ll_gpio_port.c, 402 :: 		uint32_t mode          = 0;
;hal_ll_gpio_port.c, 403 :: 		uint32_t speed         = 0;
;hal_ll_gpio_port.c, 404 :: 		uint32_t otype         = 0;
;hal_ll_gpio_port.c, 405 :: 		uint32_t pull          = 0;
;hal_ll_gpio_port.c, 409 :: 		port_ptr = ( hal_ll_gpio_base_handle_t *)port;
0x01EE	0x4606    MOV	R6, R0
;hal_ll_gpio_port.c, 411 :: 		hal_ll_gpio_clock_enable( port );
0x01F0	0xF7FFFFCA  BL	hal_ll_gpio_port_hal_ll_gpio_clock_enable+0
;hal_ll_gpio_port.c, 413 :: 		if ( pin_mask == GPIO_PIN_MASK_LOW )
0x01F4	0xF1B50FFF  CMP	R5, #255
0x01F8	0xD125    BNE	L_hal_ll_gpio_port_hal_ll_gpio_config7
;hal_ll_gpio_port.c, 415 :: 		port_ptr->moder &= HAL_LL_NIBBLE_HIGH_32BIT;
0x01FA	0x6834    LDR	R4, [R6, #0]
0x01FC	0x4B80    LDR	R3, [PC, #512]
0x01FE	0xEA040303  AND	R3, R4, R3, LSL #0
0x0202	0x6033    STR	R3, [R6, #0]
;hal_ll_gpio_port.c, 416 :: 		if ( config == GPIO_CFG_DIGITAL_OUTPUT )
0x0204	0x4B7F    LDR	R3, [PC, #508]
0x0206	0x429F    CMP	R7, R3
0x0208	0xD114    BNE	L_hal_ll_gpio_port_hal_ll_gpio_config8
;hal_ll_gpio_port.c, 418 :: 		port_ptr->moder     |= 0x00005555;
0x020A	0x6834    LDR	R4, [R6, #0]
0x020C	0xF2455355  MOVW	R3, #21845
0x0210	0xEA440303  ORR	R3, R4, R3, LSL #0
0x0214	0x6033    STR	R3, [R6, #0]
;hal_ll_gpio_port.c, 419 :: 		port_ptr->otyper    &= 0xFFFFFF00;
0x0216	0x1D35    ADDS	R5, R6, #4
0x0218	0x682C    LDR	R4, [R5, #0]
0x021A	0xF06F03FF  MVN	R3, #255
0x021E	0xEA040303  AND	R3, R4, R3, LSL #0
0x0222	0x602B    STR	R3, [R5, #0]
;hal_ll_gpio_port.c, 420 :: 		port_ptr->ospeedr   |= HAL_LL_NIBBLE_LOW_32BIT;
0x0224	0xF2060508  ADDW	R5, R6, #8
0x0228	0x682C    LDR	R4, [R5, #0]
0x022A	0x4B77    LDR	R3, [PC, #476]
0x022C	0xEA440303  ORR	R3, R4, R3, LSL #0
0x0230	0x602B    STR	R3, [R5, #0]
;hal_ll_gpio_port.c, 421 :: 		return;
0x0232	0xE0E1    B	L_end_hal_ll_gpio_config
;hal_ll_gpio_port.c, 422 :: 		}
L_hal_ll_gpio_port_hal_ll_gpio_config8:
;hal_ll_gpio_port.c, 423 :: 		if ( config == GPIO_CFG_DIGITAL_INPUT )
0x0234	0x2F42    CMP	R7, #66
0x0236	0xD105    BNE	L_hal_ll_gpio_port_hal_ll_gpio_config9
;hal_ll_gpio_port.c, 425 :: 		port_ptr->moder     &= HAL_LL_NIBBLE_HIGH_32BIT;
0x0238	0x6834    LDR	R4, [R6, #0]
0x023A	0x4B71    LDR	R3, [PC, #452]
0x023C	0xEA040303  AND	R3, R4, R3, LSL #0
0x0240	0x6033    STR	R3, [R6, #0]
;hal_ll_gpio_port.c, 426 :: 		return;
0x0242	0xE0D9    B	L_end_hal_ll_gpio_config
;hal_ll_gpio_port.c, 427 :: 		}
L_hal_ll_gpio_port_hal_ll_gpio_config9:
;hal_ll_gpio_port.c, 428 :: 		}
0x0244	0xE026    B	L_hal_ll_gpio_port_hal_ll_gpio_config10
L_hal_ll_gpio_port_hal_ll_gpio_config7:
;hal_ll_gpio_port.c, 429 :: 		else if ( pin_mask == GPIO_PIN_MASK_HIGH )
0x0246	0xF5B54F7F  CMP	R5, #65280
0x024A	0xD123    BNE	L_hal_ll_gpio_port_hal_ll_gpio_config11
;hal_ll_gpio_port.c, 431 :: 		port_ptr->moder &= HAL_LL_NIBBLE_LOW_32BIT;
0x024C	0x6834    LDR	R4, [R6, #0]
0x024E	0x4B6E    LDR	R3, [PC, #440]
0x0250	0xEA040303  AND	R3, R4, R3, LSL #0
0x0254	0x6033    STR	R3, [R6, #0]
;hal_ll_gpio_port.c, 432 :: 		if ( config == GPIO_CFG_DIGITAL_OUTPUT )
0x0256	0x4B6B    LDR	R3, [PC, #428]
0x0258	0x429F    CMP	R7, R3
0x025A	0xD113    BNE	L_hal_ll_gpio_port_hal_ll_gpio_config12
;hal_ll_gpio_port.c, 434 :: 		port_ptr->moder     |= 0x55550000;
0x025C	0x6834    LDR	R4, [R6, #0]
0x025E	0x4B6B    LDR	R3, [PC, #428]
0x0260	0xEA440303  ORR	R3, R4, R3, LSL #0
0x0264	0x6033    STR	R3, [R6, #0]
;hal_ll_gpio_port.c, 435 :: 		port_ptr->otyper    &= 0xFFFF00FF;
0x0266	0x1D35    ADDS	R5, R6, #4
0x0268	0x682C    LDR	R4, [R5, #0]
0x026A	0xF46F437F  MVN	R3, #65280
0x026E	0xEA040303  AND	R3, R4, R3, LSL #0
0x0272	0x602B    STR	R3, [R5, #0]
;hal_ll_gpio_port.c, 436 :: 		port_ptr->ospeedr   |= HAL_LL_NIBBLE_HIGH_32BIT;
0x0274	0xF2060508  ADDW	R5, R6, #8
0x0278	0x682C    LDR	R4, [R5, #0]
0x027A	0x4B61    LDR	R3, [PC, #388]
0x027C	0xEA440303  ORR	R3, R4, R3, LSL #0
0x0280	0x602B    STR	R3, [R5, #0]
;hal_ll_gpio_port.c, 437 :: 		return;
0x0282	0xE0B9    B	L_end_hal_ll_gpio_config
;hal_ll_gpio_port.c, 438 :: 		}
L_hal_ll_gpio_port_hal_ll_gpio_config12:
;hal_ll_gpio_port.c, 439 :: 		if ( config == GPIO_CFG_DIGITAL_INPUT )
0x0284	0x2F42    CMP	R7, #66
0x0286	0xD105    BNE	L_hal_ll_gpio_port_hal_ll_gpio_config13
;hal_ll_gpio_port.c, 441 :: 		port_ptr->moder     &= HAL_LL_NIBBLE_LOW_32BIT;
0x0288	0x6834    LDR	R4, [R6, #0]
0x028A	0x4B5F    LDR	R3, [PC, #380]
0x028C	0xEA040303  AND	R3, R4, R3, LSL #0
0x0290	0x6033    STR	R3, [R6, #0]
;hal_ll_gpio_port.c, 442 :: 		return;
0x0292	0xE0B1    B	L_end_hal_ll_gpio_config
;hal_ll_gpio_port.c, 443 :: 		}
L_hal_ll_gpio_port_hal_ll_gpio_config13:
;hal_ll_gpio_port.c, 444 :: 		}
L_hal_ll_gpio_port_hal_ll_gpio_config11:
L_hal_ll_gpio_port_hal_ll_gpio_config10:
;hal_ll_gpio_port.c, 446 :: 		if ( pin_mask == GPIO_PIN_MASK_ALL )
0x0294	0x4B5C    LDR	R3, [PC, #368]
0x0296	0x429D    CMP	R5, R3
0x0298	0xD112    BNE	L_hal_ll_gpio_port_hal_ll_gpio_config14
;hal_ll_gpio_port.c, 448 :: 		if ( config == GPIO_CFG_DIGITAL_OUTPUT )
0x029A	0x4B5A    LDR	R3, [PC, #360]
0x029C	0x429F    CMP	R7, R3
0x029E	0xD10A    BNE	L_hal_ll_gpio_port_hal_ll_gpio_config15
;hal_ll_gpio_port.c, 450 :: 		port_ptr->moder     = 0x55555555;
0x02A0	0xF04F3355  MOV	R3, #1431655765
0x02A4	0x6033    STR	R3, [R6, #0]
;hal_ll_gpio_port.c, 451 :: 		port_ptr->otyper    = 0;
0x02A6	0x1D34    ADDS	R4, R6, #4
0x02A8	0x2300    MOVS	R3, #0
0x02AA	0x6023    STR	R3, [R4, #0]
;hal_ll_gpio_port.c, 452 :: 		port_ptr->ospeedr   = HAL_LL_NIBBLE_HIGH_32BIT;
0x02AC	0xF2060408  ADDW	R4, R6, #8
0x02B0	0x4B53    LDR	R3, [PC, #332]
0x02B2	0x6023    STR	R3, [R4, #0]
;hal_ll_gpio_port.c, 453 :: 		return;
0x02B4	0xE0A0    B	L_end_hal_ll_gpio_config
;hal_ll_gpio_port.c, 454 :: 		}
L_hal_ll_gpio_port_hal_ll_gpio_config15:
;hal_ll_gpio_port.c, 455 :: 		if ( config == GPIO_CFG_DIGITAL_INPUT )
0x02B6	0x2F42    CMP	R7, #66
0x02B8	0xD102    BNE	L_hal_ll_gpio_port_hal_ll_gpio_config16
;hal_ll_gpio_port.c, 457 :: 		port_ptr->moder     = 0;
0x02BA	0x2300    MOVS	R3, #0
0x02BC	0x6033    STR	R3, [R6, #0]
;hal_ll_gpio_port.c, 458 :: 		return;
0x02BE	0xE09B    B	L_end_hal_ll_gpio_config
;hal_ll_gpio_port.c, 459 :: 		}
L_hal_ll_gpio_port_hal_ll_gpio_config16:
;hal_ll_gpio_port.c, 460 :: 		}
L_hal_ll_gpio_port_hal_ll_gpio_config14:
;hal_ll_gpio_port.c, 462 :: 		if ( config & GPIO_CFG_MODE_ANALOG )
0x02C0	0xF0070301  AND	R3, R7, #1
0x02C4	0xB10B    CBZ	R3, L_hal_ll_gpio_port_hal_ll_gpio_config17
;hal_ll_gpio_port.c, 463 :: 		mode = 3;
0x02C6	0x2003    MOVS	R0, #3
0x02C8	0xE00A    B	L_hal_ll_gpio_port_hal_ll_gpio_config18
L_hal_ll_gpio_port_hal_ll_gpio_config17:
;hal_ll_gpio_port.c, 464 :: 		else if ( config & GPIO_CFG_MODE_ALT_FUNCTION )
0x02CA	0xF0070308  AND	R3, R7, #8
0x02CE	0xB10B    CBZ	R3, L_hal_ll_gpio_port_hal_ll_gpio_config19
;hal_ll_gpio_port.c, 465 :: 		mode = 2;
0x02D0	0x2002    MOVS	R0, #2
0x02D2	0xE005    B	L_hal_ll_gpio_port_hal_ll_gpio_config20
L_hal_ll_gpio_port_hal_ll_gpio_config19:
;hal_ll_gpio_port.c, 466 :: 		else if ( config & GPIO_CFG_MODE_OUTPUT )
0x02D4	0xF0070304  AND	R3, R7, #4
0x02D8	0xB10B    CBZ	R3, L_hal_ll_gpio_port_hal_ll_gpio_config21
;hal_ll_gpio_port.c, 467 :: 		mode = 1;
0x02DA	0x2001    MOVS	R0, #1
0x02DC	0xE000    B	L_hal_ll_gpio_port_hal_ll_gpio_config22
L_hal_ll_gpio_port_hal_ll_gpio_config21:
;hal_ll_gpio_port.c, 469 :: 		mode = 0;
0x02DE	0x2000    MOVS	R0, #0
L_hal_ll_gpio_port_hal_ll_gpio_config22:
L_hal_ll_gpio_port_hal_ll_gpio_config20:
L_hal_ll_gpio_port_hal_ll_gpio_config18:
;hal_ll_gpio_port.c, 473 :: 		if ( config & ( GPIO_CFG_SPEED_HIGH | GPIO_CFG_SPEED_MAX ) )
0x02E0	0x4B4B    LDR	R3, [PC, #300]
0x02E2	0xEA070303  AND	R3, R7, R3, LSL #0
0x02E6	0xB10B    CBZ	R3, L_hal_ll_gpio_port_hal_ll_gpio_config23
;hal_ll_gpio_port.c, 474 :: 		speed = 3;
0x02E8	0x2103    MOVS	R1, #3
0x02EA	0xE00A    B	L_hal_ll_gpio_port_hal_ll_gpio_config24
L_hal_ll_gpio_port_hal_ll_gpio_config23:
;hal_ll_gpio_port.c, 491 :: 		else if ( config & GPIO_CFG_SPEED_MEDIUM )
0x02EC	0xF4077300  AND	R3, R7, #512
0x02F0	0xB10B    CBZ	R3, L_hal_ll_gpio_port_hal_ll_gpio_config25
;hal_ll_gpio_port.c, 492 :: 		speed = 1;
0x02F2	0x2101    MOVS	R1, #1
0x02F4	0xE005    B	L_hal_ll_gpio_port_hal_ll_gpio_config26
L_hal_ll_gpio_port_hal_ll_gpio_config25:
;hal_ll_gpio_port.c, 493 :: 		else if ( config & GPIO_CFG_SPEED_LOW )
0x02F6	0xF0070300  AND	R3, R7, #0
0x02FA	0xB10B    CBZ	R3, L_hal_ll_gpio_port_hal_ll_gpio_config27
;hal_ll_gpio_port.c, 494 :: 		speed = 0;
0x02FC	0x2100    MOVS	R1, #0
0x02FE	0xE000    B	L_hal_ll_gpio_port_hal_ll_gpio_config28
L_hal_ll_gpio_port_hal_ll_gpio_config27:
;hal_ll_gpio_port.c, 496 :: 		speed = 0;
0x0300	0x2100    MOVS	R1, #0
L_hal_ll_gpio_port_hal_ll_gpio_config28:
L_hal_ll_gpio_port_hal_ll_gpio_config26:
L_hal_ll_gpio_port_hal_ll_gpio_config24:
;hal_ll_gpio_port.c, 498 :: 		if ( config & GPIO_CFG_OTYPE_OD )
0x0302	0xF0070320  AND	R3, R7, #32
0x0306	0xB10B    CBZ	R3, L_hal_ll_gpio_port_hal_ll_gpio_config29
;hal_ll_gpio_port.c, 499 :: 		otype = 1;
0x0308	0x2201    MOVS	R2, #1
0x030A	0xE000    B	L_hal_ll_gpio_port_hal_ll_gpio_config30
L_hal_ll_gpio_port_hal_ll_gpio_config29:
;hal_ll_gpio_port.c, 501 :: 		otype = 0;
0x030C	0x2200    MOVS	R2, #0
L_hal_ll_gpio_port_hal_ll_gpio_config30:
;hal_ll_gpio_port.c, 503 :: 		if ( config & GPIO_CFG_PULL_DOWN )
0x030E	0xF4077380  AND	R3, R7, #256
0x0312	0xB10B    CBZ	R3, L_hal_ll_gpio_port_hal_ll_gpio_config31
;hal_ll_gpio_port.c, 504 :: 		pull = 2;
0x0314	0x2302    MOVS	R3, #2
0x0316	0xE005    B	L_hal_ll_gpio_port_hal_ll_gpio_config32
L_hal_ll_gpio_port_hal_ll_gpio_config31:
;hal_ll_gpio_port.c, 505 :: 		else if ( config & GPIO_CFG_PULL_UP )
0x0318	0xF0070380  AND	R3, R7, #128
0x031C	0xB10B    CBZ	R3, L_hal_ll_gpio_port_hal_ll_gpio_config33
;hal_ll_gpio_port.c, 506 :: 		pull = 1;
0x031E	0x2301    MOVS	R3, #1
0x0320	0xE000    B	L_hal_ll_gpio_port_hal_ll_gpio_config34
L_hal_ll_gpio_port_hal_ll_gpio_config33:
;hal_ll_gpio_port.c, 508 :: 		pull = 0;
0x0322	0x2300    MOVS	R3, #0
L_hal_ll_gpio_port_hal_ll_gpio_config34:
L_hal_ll_gpio_port_hal_ll_gpio_config32:
;hal_ll_gpio_port.c, 510 :: 		for ( pin_pos = 0x00; pin_pos < 0x10; pin_pos++ )
0x0324	0xF2400A00  MOVW	R10, #0
0x0328	0x9201    STR	R2, [SP, #4]
0x032A	0xFA1FF985  UXTH	R9, R5
0x032E	0x46B8    MOV	R8, R7
0x0330	0x4637    MOV	R7, R6
0x0332	0x4606    MOV	R6, R0
0x0334	0x4618    MOV	R0, R3
0x0336	0x460A    MOV	R2, R1
0x0338	0x9901    LDR	R1, [SP, #4]
L_hal_ll_gpio_port_hal_ll_gpio_config35:
0x033A	0xF1BA0F10  CMP	R10, #16
0x033E	0xD25B    BCS	L_hal_ll_gpio_port_hal_ll_gpio_config36
;hal_ll_gpio_port.c, 512 :: 		pos = ( ( uint32_t )0x01 ) << pin_pos;
0x0340	0xF04F0301  MOV	R3, #1
0x0344	0xFA03F40A  LSL	R4, R3, R10
;hal_ll_gpio_port.c, 513 :: 		current_pin = ( pin_mask ) & pos;
0x0348	0xEA090304  AND	R3, R9, R4, LSL #0
;hal_ll_gpio_port.c, 515 :: 		if ( current_pin == pos )
0x034C	0x42A3    CMP	R3, R4
0x034E	0xD150    BNE	L_hal_ll_gpio_port_hal_ll_gpio_config38
;hal_ll_gpio_port.c, 517 :: 		port_ptr->moder &= ~( GPIO_MODER_MODER0 << ( pin_pos * 2 ) );
0x0350	0xEA4F044A  LSL	R4, R10, #1
0x0354	0xF04F0303  MOV	R3, #3
0x0358	0x40A3    LSLS	R3, R4
0x035A	0x43DC    MVN	R4, R3
0x035C	0x683B    LDR	R3, [R7, #0]
0x035E	0x4023    ANDS	R3, R4
0x0360	0x603B    STR	R3, [R7, #0]
;hal_ll_gpio_port.c, 518 :: 		port_ptr->moder |= ( ( ( uint32_t )mode ) << ( pin_pos * 2 ) );
0x0362	0xEA4F034A  LSL	R3, R10, #1
0x0366	0xFA06F403  LSL	R4, R6, R3
0x036A	0x683B    LDR	R3, [R7, #0]
0x036C	0x4323    ORRS	R3, R4
0x036E	0x603B    STR	R3, [R7, #0]
;hal_ll_gpio_port.c, 520 :: 		if ( config & ( GPIO_CFG_MODE_OUTPUT | GPIO_CFG_MODE_ALT_FUNCTION ) )
0x0370	0xF008030C  AND	R3, R8, #12
0x0374	0xB33B    CBZ	R3, L_hal_ll_gpio_port_hal_ll_gpio_config39
;hal_ll_gpio_port.c, 522 :: 		port_ptr->ospeedr &= ~( GPIO_OSPEEDER_OSPEEDR0 << ( pin_pos * 2 ) );
0x0376	0xF2070508  ADDW	R5, R7, #8
0x037A	0xEA4F044A  LSL	R4, R10, #1
0x037E	0xF04F0303  MOV	R3, #3
0x0382	0x40A3    LSLS	R3, R4
0x0384	0x43DC    MVN	R4, R3
0x0386	0x682B    LDR	R3, [R5, #0]
0x0388	0x4023    ANDS	R3, R4
0x038A	0x602B    STR	R3, [R5, #0]
;hal_ll_gpio_port.c, 523 :: 		port_ptr->ospeedr |= ( ( uint32_t )( speed ) << ( pin_pos * 2 ) );
0x038C	0xF2070508  ADDW	R5, R7, #8
0x0390	0xEA4F034A  LSL	R3, R10, #1
0x0394	0xFA02F403  LSL	R4, R2, R3
0x0398	0x682B    LDR	R3, [R5, #0]
0x039A	0x4323    ORRS	R3, R4
0x039C	0x602B    STR	R3, [R5, #0]
;hal_ll_gpio_port.c, 525 :: 		port_ptr->otyper &= ~( GPIO_OTYPER_OT_0 << ( ( uint16_t )pin_pos ) ) ;
0x039E	0x1D3D    ADDS	R5, R7, #4
0x03A0	0xFA1FF48A  UXTH	R4, R10
0x03A4	0xF04F0301  MOV	R3, #1
0x03A8	0x40A3    LSLS	R3, R4
0x03AA	0x43DC    MVN	R4, R3
0x03AC	0x682B    LDR	R3, [R5, #0]
0x03AE	0x4023    ANDS	R3, R4
0x03B0	0x602B    STR	R3, [R5, #0]
;hal_ll_gpio_port.c, 526 :: 		port_ptr->otyper |= ( uint16_t )( ( ( uint16_t )otype ) << ( ( uint16_t )pin_pos ) );
0x03B2	0x1D3D    ADDS	R5, R7, #4
0x03B4	0xFA1FF48A  UXTH	R4, R10
0x03B8	0xB28B    UXTH	R3, R1
0x03BA	0xFA03F404  LSL	R4, R3, R4
0x03BE	0xB2A4    UXTH	R4, R4
0x03C0	0x682B    LDR	R3, [R5, #0]
0x03C2	0x4323    ORRS	R3, R4
0x03C4	0x602B    STR	R3, [R5, #0]
;hal_ll_gpio_port.c, 527 :: 		}
L_hal_ll_gpio_port_hal_ll_gpio_config39:
;hal_ll_gpio_port.c, 529 :: 		port_ptr->pupdr &= ~( GPIO_PUPDR_PUPDR0 << ( ( uint16_t )pin_pos * 2 ) );
0x03C6	0xF207050C  ADDW	R5, R7, #12
0x03CA	0xFA1FF38A  UXTH	R3, R10
0x03CE	0x005C    LSLS	R4, R3, #1
0x03D0	0xB2A4    UXTH	R4, R4
0x03D2	0xF04F0303  MOV	R3, #3
0x03D6	0x40A3    LSLS	R3, R4
0x03D8	0x43DC    MVN	R4, R3
0x03DA	0x682B    LDR	R3, [R5, #0]
0x03DC	0x4023    ANDS	R3, R4
0x03DE	0x602B    STR	R3, [R5, #0]
;hal_ll_gpio_port.c, 530 :: 		port_ptr->pupdr |= ( ( ( uint32_t )pull ) << ( pin_pos * 2 ) );
0x03E0	0xF207050C  ADDW	R5, R7, #12
0x03E4	0xEA4F034A  LSL	R3, R10, #1
0x03E8	0xFA00F403  LSL	R4, R0, R3
0x03EC	0x682B    LDR	R3, [R5, #0]
0x03EE	0x4323    ORRS	R3, R4
0x03F0	0x602B    STR	R3, [R5, #0]
;hal_ll_gpio_port.c, 531 :: 		}
L_hal_ll_gpio_port_hal_ll_gpio_config38:
;hal_ll_gpio_port.c, 510 :: 		for ( pin_pos = 0x00; pin_pos < 0x10; pin_pos++ )
0x03F2	0xF10A0A01  ADD	R10, R10, #1
;hal_ll_gpio_port.c, 532 :: 		}
0x03F6	0xE7A0    B	L_hal_ll_gpio_port_hal_ll_gpio_config35
L_hal_ll_gpio_port_hal_ll_gpio_config36:
;hal_ll_gpio_port.c, 533 :: 		}
L_end_hal_ll_gpio_config:
0x03F8	0xF8DDE000  LDR	LR, [SP, #0]
0x03FC	0xB002    ADD	SP, SP, #8
0x03FE	0x4770    BX	LR
0x0400	0x0000FFFF  	#-65536
0x0404	0x00140008  	#524308
0x0408	0xFFFF0000  	#65535
0x040C	0x00005555  	#1431633920
0x0410	0x08000008  	#526336
; end of hal_ll_gpio_port_hal_ll_gpio_config
hal_ll_gpio_port_hal_ll_gpio_clock_enable:
;hal_ll_gpio_port.c, 312 :: 		static void hal_ll_gpio_clock_enable( uint32_t *port )
0x0188	0xB081    SUB	SP, SP, #4
;hal_ll_gpio_port.c, 314 :: 		uint32_t pos = 0;
0x018A	0xF04F0300  MOV	R3, #0
;hal_ll_gpio_port.c, 316 :: 		switch ( ( uint32_t )port & 0xFFFFFC00 )
0x018E	0x490D    LDR	R1, [PC, #52]
0x0190	0xEA000201  AND	R2, R0, R1, LSL #0
0x0194	0xE005    B	L_hal_ll_gpio_port_hal_ll_gpio_clock_enable2
;hal_ll_gpio_port.c, 319 :: 		case GPIOA_BASE_ADDR: pos = 0x1;   break;
L_hal_ll_gpio_port_hal_ll_gpio_clock_enable4:
0x0196	0x2001    MOVS	R0, #1
0x0198	0xE00D    B	L_hal_ll_gpio_port_hal_ll_gpio_clock_enable3
;hal_ll_gpio_port.c, 322 :: 		case GPIOB_BASE_ADDR: pos = 0x2;   break;
L_hal_ll_gpio_port_hal_ll_gpio_clock_enable5:
0x019A	0x2002    MOVS	R0, #2
0x019C	0xE00B    B	L_hal_ll_gpio_port_hal_ll_gpio_clock_enable3
;hal_ll_gpio_port.c, 345 :: 		case GPIOF_BASE_ADDR: pos = 0x20;  break;
L_hal_ll_gpio_port_hal_ll_gpio_clock_enable6:
0x019E	0x2020    MOVS	R0, #32
0x01A0	0xE009    B	L_hal_ll_gpio_port_hal_ll_gpio_clock_enable3
;hal_ll_gpio_port.c, 363 :: 		}
L_hal_ll_gpio_port_hal_ll_gpio_clock_enable2:
0x01A2	0xF1B24F90  CMP	R2, #1207959552
0x01A6	0xD0F6    BEQ	L_hal_ll_gpio_port_hal_ll_gpio_clock_enable4
0x01A8	0x4907    LDR	R1, [PC, #28]
0x01AA	0x428A    CMP	R2, R1
0x01AC	0xD0F5    BEQ	L_hal_ll_gpio_port_hal_ll_gpio_clock_enable5
0x01AE	0x4907    LDR	R1, [PC, #28]
0x01B0	0x428A    CMP	R2, R1
0x01B2	0xD0F4    BEQ	L_hal_ll_gpio_port_hal_ll_gpio_clock_enable6
0x01B4	0x4618    MOV	R0, R3
L_hal_ll_gpio_port_hal_ll_gpio_clock_enable3:
;hal_ll_gpio_port.c, 383 :: 		*(uint32_t *)RCC_GPIOCLOCK |= ( uint32_t )pos << GPIO_AHB_SHIFT;
0x01B6	0x0443    LSLS	R3, R0, #17
0x01B8	0x4A05    LDR	R2, [PC, #20]
0x01BA	0x6811    LDR	R1, [R2, #0]
0x01BC	0x4319    ORRS	R1, R3
0x01BE	0x6011    STR	R1, [R2, #0]
;hal_ll_gpio_port.c, 387 :: 		}
L_end_hal_ll_gpio_clock_enable:
0x01C0	0xB001    ADD	SP, SP, #4
0x01C2	0x4770    BX	LR
0x01C4	0xFC00FFFF  	#-1024
0x01C8	0x04004800  	#1207960576
0x01CC	0x14004800  	#1207964672
0x01D0	0x10144002  	#1073877012
; end of hal_ll_gpio_port_hal_ll_gpio_clock_enable
_hal_ll_gpio_digital_output:
;hal_ll_gpio_port.c, 290 :: 		void hal_ll_gpio_digital_output( uint32_t *port, uint16_t pin_mask )
0x0444	0xB081    SUB	SP, SP, #4
0x0446	0xF8CDE000  STR	LR, [SP, #0]
;hal_ll_gpio_port.c, 292 :: 		hal_ll_gpio_config( port, pin_mask, GPIO_CFG_DIGITAL_OUTPUT );
0x044A	0x4A03    LDR	R2, [PC, #12]
0x044C	0xF7FFFECA  BL	hal_ll_gpio_port_hal_ll_gpio_config+0
;hal_ll_gpio_port.c, 293 :: 		}
L_end_hal_ll_gpio_digital_output:
0x0450	0xF8DDE000  LDR	LR, [SP, #0]
0x0454	0xB001    ADD	SP, SP, #4
0x0456	0x4770    BX	LR
0x0458	0x00140008  	#524308
; end of _hal_ll_gpio_digital_output
drv_app_MX_ADC1_Init:
;drv_app.c, 37 :: 		static void MX_ADC1_Init(void)
0x0824	0xB081    SUB	SP, SP, #4
;drv_app.c, 40 :: 		}
L_end_MX_ADC1_Init:
0x0826	0xB001    ADD	SP, SP, #4
0x0828	0x4770    BX	LR
; end of drv_app_MX_ADC1_Init
drv_app_MX_UART2_Init:
;drv_app.c, 43 :: 		static void MX_UART2_Init(void)
0x081C	0xB081    SUB	SP, SP, #4
;drv_app.c, 46 :: 		}
L_end_MX_UART2_Init:
0x081E	0xB001    ADD	SP, SP, #4
0x0820	0x4770    BX	LR
; end of drv_app_MX_UART2_Init
___CC2DW:
;__Lib_System_3XX.c, 22 :: 		void __CC2DW() {
0x096C	0xB081    SUB	SP, SP, #4
;__Lib_System_3XX.c, 24 :: 		L_loopDW:
L_loopDW:
;__Lib_System_3XX.c, 25 :: 		LDRB.W       R9, [R12], #1
0x096E	0xF81C9B01  LDRB	R9, [R12], #1
;__Lib_System_3XX.c, 26 :: 		STRB.W       R9, [R11], #1
0x0972	0xF80B9B01  STRB	R9, [R11], #1
;__Lib_System_3XX.c, 27 :: 		CMP.W        R11, R10
0x0976	0xEBBB0F0A  CMP	R11, R10, LSL #0
;__Lib_System_3XX.c, 28 :: 		BNE L_loopDW
0x097A	0xD1F8    BNE	L_loopDW
;__Lib_System_3XX.c, 30 :: 		}
L_end___CC2DW:
0x097C	0xB001    ADD	SP, SP, #4
0x097E	0x4770    BX	LR
; end of ___CC2DW
__Lib_System_3XX_InitialSetUpRCCRCC2:
;__Lib_System_3XX.c, 187 :: 		static void InitialSetUpRCCRCC2(){
0x0B20	0xB081    SUB	SP, SP, #4
0x0B22	0xF8CDE000  STR	LR, [SP, #0]
;__Lib_System_3XX.c, 193 :: 		ulRCC_CR    = 12345678;
0x0B26	0x4B36    LDR	R3, [PC, #216]
;__Lib_System_3XX.c, 194 :: 		ulRCC_CFGR  = 12345679;
0x0B28	0x4A36    LDR	R2, [PC, #216]
;__Lib_System_3XX.c, 195 :: 		ulRCC_CFGR2 = 12345680;
0x0B2A	0x4C37    LDR	R4, [PC, #220]
;__Lib_System_3XX.c, 196 :: 		Fosc_kHz    = 12345677;
0x0B2C	0x4937    LDR	R1, [PC, #220]
;__Lib_System_3XX.c, 203 :: 		if (Fosc_kHz > 48000)
0x0B2E	0xF64B3080  MOVW	R0, #48000
0x0B32	0x4281    CMP	R1, R0
0x0B34	0xD906    BLS	L___Lib_System_3XX_InitialSetUpRCCRCC28
;__Lib_System_3XX.c, 204 :: 		FLASH_ACR |= 2;
0x0B36	0x4836    LDR	R0, [PC, #216]
0x0B38	0x6800    LDR	R0, [R0, #0]
0x0B3A	0xF0400102  ORR	R1, R0, #2
0x0B3E	0x4834    LDR	R0, [PC, #208]
0x0B40	0x6001    STR	R1, [R0, #0]
0x0B42	0xE011    B	L___Lib_System_3XX_InitialSetUpRCCRCC29
L___Lib_System_3XX_InitialSetUpRCCRCC28:
;__Lib_System_3XX.c, 205 :: 		else if (Fosc_kHz > 24000)
0x0B44	0xF64550C0  MOVW	R0, #24000
0x0B48	0x4281    CMP	R1, R0
0x0B4A	0xD906    BLS	L___Lib_System_3XX_InitialSetUpRCCRCC210
;__Lib_System_3XX.c, 206 :: 		FLASH_ACR |= 1;
0x0B4C	0x4830    LDR	R0, [PC, #192]
0x0B4E	0x6800    LDR	R0, [R0, #0]
0x0B50	0xF0400101  ORR	R1, R0, #1
0x0B54	0x482E    LDR	R0, [PC, #184]
0x0B56	0x6001    STR	R1, [R0, #0]
0x0B58	0xE006    B	L___Lib_System_3XX_InitialSetUpRCCRCC211
L___Lib_System_3XX_InitialSetUpRCCRCC210:
;__Lib_System_3XX.c, 208 :: 		FLASH_ACR &= ~7ul;
0x0B5A	0x482D    LDR	R0, [PC, #180]
0x0B5C	0x6801    LDR	R1, [R0, #0]
0x0B5E	0xF06F0007  MVN	R0, #7
0x0B62	0x4001    ANDS	R1, R0
0x0B64	0x482A    LDR	R0, [PC, #168]
0x0B66	0x6001    STR	R1, [R0, #0]
L___Lib_System_3XX_InitialSetUpRCCRCC211:
L___Lib_System_3XX_InitialSetUpRCCRCC29:
;__Lib_System_3XX.c, 210 :: 		SystemClockSetDefault();
0x0B68	0xF7FFFEC6  BL	__Lib_System_3XX_SystemClockSetDefault+0
;__Lib_System_3XX.c, 212 :: 		RCC_CFGR2 = ulRCC_CFGR2;
0x0B6C	0x4829    LDR	R0, [PC, #164]
0x0B6E	0x6004    STR	R4, [R0, #0]
;__Lib_System_3XX.c, 213 :: 		RCC_CFGR  = ulRCC_CFGR;                       /* set clock configuration register */
0x0B70	0x4829    LDR	R0, [PC, #164]
0x0B72	0x6002    STR	R2, [R0, #0]
;__Lib_System_3XX.c, 215 :: 		tmp_rcc_cr = RCC_CR;
0x0B74	0x4829    LDR	R0, [PC, #164]
0x0B76	0x6801    LDR	R1, [R0, #0]
;__Lib_System_3XX.c, 216 :: 		ulRCC_CR = ulRCC_CR & 0xFFFFFF0F;
0x0B78	0xF06F00F0  MVN	R0, #240
0x0B7C	0x4003    ANDS	R3, R0
;__Lib_System_3XX.c, 217 :: 		ulRCC_CR |= tmp_rcc_cr & 0x000000F0;
0x0B7E	0xF00100F0  AND	R0, R1, #240
0x0B82	0x4303    ORRS	R3, R0
;__Lib_System_3XX.c, 219 :: 		RCC_CR = ulRCC_CR & 0x000FFFFF;               /* do not start PLLs yet */
0x0B84	0x4826    LDR	R0, [PC, #152]
0x0B86	0xEA030100  AND	R1, R3, R0, LSL #0
0x0B8A	0x4824    LDR	R0, [PC, #144]
0x0B8C	0x6001    STR	R1, [R0, #0]
;__Lib_System_3XX.c, 221 :: 		if (ulRCC_CR & (1ul << HSION)) {                 /* if HSI enabled*/
0x0B8E	0xF0030001  AND	R0, R3, #1
0x0B92	0xB140    CBZ	R0, L___Lib_System_3XX_InitialSetUpRCCRCC223
0x0B94	0x4619    MOV	R1, R3
;__Lib_System_3XX.c, 222 :: 		while ((RCC_CR & (1ul << HSIRDY)) == 0)
L___Lib_System_3XX_InitialSetUpRCCRCC213:
0x0B96	0x4821    LDR	R0, [PC, #132]
0x0B98	0x6800    LDR	R0, [R0, #0]
0x0B9A	0xF0000002  AND	R0, R0, #2
0x0B9E	0x2800    CMP	R0, #0
0x0BA0	0xD100    BNE	L___Lib_System_3XX_InitialSetUpRCCRCC214
;__Lib_System_3XX.c, 223 :: 		;       /* Wait for HSIRDY = 1 (HSI is ready)*/
0x0BA2	0xE7F8    B	L___Lib_System_3XX_InitialSetUpRCCRCC213
L___Lib_System_3XX_InitialSetUpRCCRCC214:
;__Lib_System_3XX.c, 224 :: 		}
0x0BA4	0xE000    B	L___Lib_System_3XX_InitialSetUpRCCRCC212
L___Lib_System_3XX_InitialSetUpRCCRCC223:
;__Lib_System_3XX.c, 221 :: 		if (ulRCC_CR & (1ul << HSION)) {                 /* if HSI enabled*/
0x0BA6	0x4619    MOV	R1, R3
;__Lib_System_3XX.c, 224 :: 		}
L___Lib_System_3XX_InitialSetUpRCCRCC212:
;__Lib_System_3XX.c, 226 :: 		if (ulRCC_CR & (1ul << HSEON)) {                 /* if HSE enabled*/
0x0BA8	0xF4013080  AND	R0, R1, #65536
0x0BAC	0xB138    CBZ	R0, L___Lib_System_3XX_InitialSetUpRCCRCC224
;__Lib_System_3XX.c, 227 :: 		while ((RCC_CR & (1ul << HSERDY)) == 0)
L___Lib_System_3XX_InitialSetUpRCCRCC216:
0x0BAE	0x481B    LDR	R0, [PC, #108]
0x0BB0	0x6800    LDR	R0, [R0, #0]
0x0BB2	0xF4003000  AND	R0, R0, #131072
0x0BB6	0x2800    CMP	R0, #0
0x0BB8	0xD100    BNE	L___Lib_System_3XX_InitialSetUpRCCRCC217
;__Lib_System_3XX.c, 228 :: 		;          /* Wait for HSERDY = 1 (HSE is ready)*/
0x0BBA	0xE7F8    B	L___Lib_System_3XX_InitialSetUpRCCRCC216
L___Lib_System_3XX_InitialSetUpRCCRCC217:
;__Lib_System_3XX.c, 229 :: 		}
0x0BBC	0xE7FF    B	L___Lib_System_3XX_InitialSetUpRCCRCC215
L___Lib_System_3XX_InitialSetUpRCCRCC224:
;__Lib_System_3XX.c, 226 :: 		if (ulRCC_CR & (1ul << HSEON)) {                 /* if HSE enabled*/
;__Lib_System_3XX.c, 229 :: 		}
L___Lib_System_3XX_InitialSetUpRCCRCC215:
;__Lib_System_3XX.c, 231 :: 		if (ulRCC_CR & (1ul << PLLON)) {                /* if PLL1 enabled*/
0x0BBE	0xF0017080  AND	R0, R1, #16777216
0x0BC2	0xB170    CBZ	R0, L___Lib_System_3XX_InitialSetUpRCCRCC225
;__Lib_System_3XX.c, 232 :: 		RCC_CR |= (1ul << PLLON);                              /* PLL3 On */
0x0BC4	0x4815    LDR	R0, [PC, #84]
0x0BC6	0x6800    LDR	R0, [R0, #0]
0x0BC8	0xF0407180  ORR	R1, R0, #16777216
0x0BCC	0x4813    LDR	R0, [PC, #76]
0x0BCE	0x6001    STR	R1, [R0, #0]
0x0BD0	0x4611    MOV	R1, R2
;__Lib_System_3XX.c, 233 :: 		while ((RCC_CR & (1ul << PLLRDY)) == 0)
L___Lib_System_3XX_InitialSetUpRCCRCC219:
0x0BD2	0x4812    LDR	R0, [PC, #72]
0x0BD4	0x6800    LDR	R0, [R0, #0]
0x0BD6	0xF0007000  AND	R0, R0, #33554432
0x0BDA	0xB900    CBNZ	R0, L___Lib_System_3XX_InitialSetUpRCCRCC220
;__Lib_System_3XX.c, 234 :: 		;         /* Wait for PLL1RDY = 1 (PLL is ready)*/
0x0BDC	0xE7F9    B	L___Lib_System_3XX_InitialSetUpRCCRCC219
L___Lib_System_3XX_InitialSetUpRCCRCC220:
;__Lib_System_3XX.c, 235 :: 		}
0x0BDE	0x460A    MOV	R2, R1
0x0BE0	0xE7FF    B	L___Lib_System_3XX_InitialSetUpRCCRCC218
L___Lib_System_3XX_InitialSetUpRCCRCC225:
;__Lib_System_3XX.c, 231 :: 		if (ulRCC_CR & (1ul << PLLON)) {                /* if PLL1 enabled*/
;__Lib_System_3XX.c, 235 :: 		}
L___Lib_System_3XX_InitialSetUpRCCRCC218:
;__Lib_System_3XX.c, 238 :: 		while ((RCC_CFGR & RCC_CFGR_SWS) != ((ulRCC_CFGR<<2) & RCC_CFGR_SWS))
L___Lib_System_3XX_InitialSetUpRCCRCC221:
0x0BE2	0x480D    LDR	R0, [PC, #52]
0x0BE4	0x6800    LDR	R0, [R0, #0]
0x0BE6	0xF000010C  AND	R1, R0, #12
0x0BEA	0x0090    LSLS	R0, R2, #2
0x0BEC	0xF000000C  AND	R0, R0, #12
0x0BF0	0x4281    CMP	R1, R0
0x0BF2	0xD000    BEQ	L___Lib_System_3XX_InitialSetUpRCCRCC222
;__Lib_System_3XX.c, 239 :: 		;
0x0BF4	0xE7F5    B	L___Lib_System_3XX_InitialSetUpRCCRCC221
L___Lib_System_3XX_InitialSetUpRCCRCC222:
;__Lib_System_3XX.c, 241 :: 		}
L_end_InitialSetUpRCCRCC2:
0x0BF6	0xF8DDE000  LDR	LR, [SP, #0]
0x0BFA	0xB001    ADD	SP, SP, #4
0x0BFC	0x4770    BX	LR
0x0BFE	0xBF00    NOP
0x0C00	0x00810000  	#129
0x0C04	0x00000000  	#0
0x0C08	0x00000000  	#0
0x0C0C	0x03E80000  	#1000
0x0C10	0x20004002  	FLASH_ACR+0
0x0C14	0x102C4002  	RCC_CFGR2+0
0x0C18	0x10044002  	RCC_CFGR+0
0x0C1C	0x10004002  	RCC_CR+0
0x0C20	0xFFFF000F  	#1048575
; end of __Lib_System_3XX_InitialSetUpRCCRCC2
__Lib_System_3XX_SystemClockSetDefault:
;__Lib_System_3XX.c, 160 :: 		static void SystemClockSetDefault(void)
0x08F8	0xB081    SUB	SP, SP, #4
;__Lib_System_3XX.c, 163 :: 		RCC_CR |= (unsigned long)0x00000001;
0x08FA	0x4817    LDR	R0, [PC, #92]
0x08FC	0x6800    LDR	R0, [R0, #0]
0x08FE	0xF0400101  ORR	R1, R0, #1
0x0902	0x4815    LDR	R0, [PC, #84]
0x0904	0x6001    STR	R1, [R0, #0]
;__Lib_System_3XX.c, 166 :: 		RCC_CFGR &= (unsigned long)0x007F0000;
0x0906	0x4815    LDR	R0, [PC, #84]
0x0908	0x6800    LDR	R0, [R0, #0]
0x090A	0xF40001FE  AND	R1, R0, #8323072
0x090E	0x4813    LDR	R0, [PC, #76]
0x0910	0x6001    STR	R1, [R0, #0]
;__Lib_System_3XX.c, 169 :: 		RCC_CR &= (unsigned long)0xFEF6FFFF;
0x0912	0x4811    LDR	R0, [PC, #68]
0x0914	0x6801    LDR	R1, [R0, #0]
0x0916	0x4812    LDR	R0, [PC, #72]
0x0918	0x4001    ANDS	R1, R0
0x091A	0x480F    LDR	R0, [PC, #60]
0x091C	0x6001    STR	R1, [R0, #0]
;__Lib_System_3XX.c, 172 :: 		RCC_CR &= (unsigned long)0xFFFBFFFF;
0x091E	0x480E    LDR	R0, [PC, #56]
0x0920	0x6801    LDR	R1, [R0, #0]
0x0922	0xF46F2080  MVN	R0, #262144
0x0926	0x4001    ANDS	R1, R0
0x0928	0x480B    LDR	R0, [PC, #44]
0x092A	0x6001    STR	R1, [R0, #0]
;__Lib_System_3XX.c, 175 :: 		RCC_CFGR &= (unsigned long)0xFF80FFFF;
0x092C	0x480B    LDR	R0, [PC, #44]
0x092E	0x6801    LDR	R1, [R0, #0]
0x0930	0xF46F00FE  MVN	R0, #8323072
0x0934	0x4001    ANDS	R1, R0
0x0936	0x4809    LDR	R0, [PC, #36]
0x0938	0x6001    STR	R1, [R0, #0]
;__Lib_System_3XX.c, 178 :: 		RCC_CFGR2 &= (unsigned long)0xFFFFFFF0;
0x093A	0x480A    LDR	R0, [PC, #40]
0x093C	0x6801    LDR	R1, [R0, #0]
0x093E	0xF06F000F  MVN	R0, #15
0x0942	0x4001    ANDS	R1, R0
0x0944	0x4807    LDR	R0, [PC, #28]
0x0946	0x6001    STR	R1, [R0, #0]
;__Lib_System_3XX.c, 181 :: 		RCC_CFGR3 &= (unsigned long)0x00000000;
0x0948	0x4807    LDR	R0, [PC, #28]
0x094A	0x6800    LDR	R0, [R0, #0]
0x094C	0xF0000100  AND	R1, R0, #0
0x0950	0x4805    LDR	R0, [PC, #20]
0x0952	0x6001    STR	R1, [R0, #0]
;__Lib_System_3XX.c, 185 :: 		}
L_end_SystemClockSetDefault:
0x0954	0xB001    ADD	SP, SP, #4
0x0956	0x4770    BX	LR
0x0958	0x10004002  	RCC_CR+0
0x095C	0x10044002  	RCC_CFGR+0
0x0960	0xFFFFFEF6  	#-17367041
0x0964	0x102C4002  	RCC_CFGR2+0
0x0968	0x10304002  	RCC_CFGR3+0
; end of __Lib_System_3XX_SystemClockSetDefault
__Lib_System_3XX_InitialSetUpFosc:
;__Lib_System_3XX.c, 243 :: 		static void InitialSetUpFosc(){
0x0C24	0xB081    SUB	SP, SP, #4
;__Lib_System_3XX.c, 244 :: 		__System_CLOCK_IN_KHZ = 12345677;
0x0C26	0x4902    LDR	R1, [PC, #8]
0x0C28	0x4802    LDR	R0, [PC, #8]
0x0C2A	0x6001    STR	R1, [R0, #0]
;__Lib_System_3XX.c, 245 :: 		}
L_end_InitialSetUpFosc:
0x0C2C	0xB001    ADD	SP, SP, #4
0x0C2E	0x4770    BX	LR
0x0C30	0x03E80000  	#1000
0x0C34	0x008C2000  	___System_CLOCK_IN_KHZ+0
; end of __Lib_System_3XX_InitialSetUpFosc
___GenExcept:
;__Lib_System_3XX.c, 88 :: 		void __GenExcept() {
0x0B18	0xB081    SUB	SP, SP, #4
;__Lib_System_3XX.c, 89 :: 		while(1) ;
L___GenExcept4:
0x0B1A	0xE7FE    B	L___GenExcept4
;__Lib_System_3XX.c, 90 :: 		}
L_end___GenExcept:
0x0B1C	0xB001    ADD	SP, SP, #4
0x0B1E	0x4770    BX	LR
; end of ___GenExcept
___EnableFPU:
;__Lib_System_3XX.c, 121 :: 		void __EnableFPU(){
0x0A64	0xB081    SUB	SP, SP, #4
;__Lib_System_3XX.c, 124 :: 		MOVW     R0, #0xED88
0x0A66	0xF64E5088  MOVW	R0, #60808
;__Lib_System_3XX.c, 125 :: 		MOVT     R0, #0xE000
0x0A6A	0xF2CE0000  MOVT	R0, #57344
;__Lib_System_3XX.c, 127 :: 		LDR     R1, [R0]
0x0A6E	0x6801    LDR	R1, [R0, #0]
;__Lib_System_3XX.c, 129 :: 		ORR     R1, R1, #0xF00000
0x0A70	0xF4410170  ORR	R1, R1, #15728640
;__Lib_System_3XX.c, 131 :: 		STR     R1, [R0]
0x0A74	0x6001    STR	R1, [R0, #0]
;__Lib_System_3XX.c, 133 :: 		asm nop
0x0A76	0xBF00    NOP
;__Lib_System_3XX.c, 134 :: 		asm nop
0x0A78	0xBF00    NOP
;__Lib_System_3XX.c, 135 :: 		asm nop
0x0A7A	0xBF00    NOP
;__Lib_System_3XX.c, 136 :: 		asm nop
0x0A7C	0xBF00    NOP
;__Lib_System_3XX.c, 138 :: 		asm vmrs R0, FPSCR
0x0A7E	0xEEF10A10  VMRS	R0, FPSCR
;__Lib_System_3XX.c, 139 :: 		R0 = R0 | (0b11ul << 22); // SWRELARM-665
0x0A82	0xF4400040  ORR	R0, R0, #12582912
;__Lib_System_3XX.c, 140 :: 		asm vmsr FPSCR, R0
0x0A86	0xEEE10A10  VMSR	FPSCR, R0
;__Lib_System_3XX.c, 141 :: 		}
L_end___EnableFPU:
0x0A8A	0xB001    ADD	SP, SP, #4
0x0A8C	0x4770    BX	LR
; end of ___EnableFPU
0x0CE8	0xB500    PUSH	(R14)
0x0CEA	0xF8DFB014  LDR	R11, [PC, #20]
0x0CEE	0xF8DFA014  LDR	R10, [PC, #20]
0x0CF2	0xF8DFC014  LDR	R12, [PC, #20]
0x0CF6	0xF7FFFE39  BL	2412
0x0CFA	0xBD00    POP	(R15)
0x0CFC	0x4770    BX	LR
0x0CFE	0xBF00    NOP
0x0D00	0x00002000  	#536870912
0x0D04	0x00842000  	#536871044
0x0D08	0x0C380000  	#3128
0x0D68	0xB500    PUSH	(R14)
0x0D6A	0xF8DFB010  LDR	R11, [PC, #16]
0x0D6E	0xF8DFA010  LDR	R10, [PC, #16]
0x0D72	0xF7FFFE05  BL	2432
0x0D76	0xBD00    POP	(R15)
0x0D78	0x4770    BX	LR
0x0D7A	0xBF00    NOP
0x0D7C	0x00002000  	#536870912
0x0D80	0x00A82000  	#536871080
_UART2_IRQHandler:
;hal_ll_uart.c, 1111 :: 		__weak void UART2_IRQHandler(void) MIKROC_IV(UART2_NVIC) {
0x0A90	0xB430    PUSH	(R4, R5)
0x0A92	0xB081    SUB	SP, SP, #4
0x0A94	0xF8CDE000  STR	LR, [SP, #0]
;hal_ll_uart.c, 1112 :: 		if( hal_ll_uart_get_status_flags( HAL_LL_UART2_BASE_ADDRESS , HAL_LL_UART_STATUS_RXNE_FLAG ) ) {
0x0A98	0x481A    LDR	R0, [PC, #104]
0x0A9A	0x6800    LDR	R0, [R0, #0]
0x0A9C	0xF0000020  AND	R0, R0, #32
0x0AA0	0xB180    CBZ	R0, L_UART2_IRQHandler46
;hal_ll_uart.c, 1113 :: 		if( ( __HAL_LL_UART_GET_IT_SOURCE( HAL_LL_UART2_BASE_ADDRESS, HAL_LL_UART_IT_RXNE ) ) != 0 ) {
0x0AA2	0x4819    LDR	R0, [PC, #100]
0x0AA4	0x6800    LDR	R0, [R0, #0]
0x0AA6	0xF0000020  AND	R0, R0, #32
0x0AAA	0xB110    CBZ	R0, L_UART2_IRQHandler47
0x0AAC	0x2001    MOVS	R0, #1
0x0AAE	0xB240    SXTB	R0, R0
0x0AB0	0xE001    B	L_UART2_IRQHandler48
L_UART2_IRQHandler47:
0x0AB2	0x2000    MOVS	R0, #0
0x0AB4	0xB240    SXTB	R0, R0
L_UART2_IRQHandler48:
0x0AB6	0xB128    CBZ	R0, L_UART2_IRQHandler49
;hal_ll_uart.c, 1114 :: 		hal_ll_uart_clear_status_flag( HAL_LL_UART2_BASE_ADDRESS, HAL_LL_UART_STATUS_RXNE_FLAG );
;hal_ll_uart.c, 1115 :: 		irq_handler( objects[ hal_ll_uart_module_num(UART_MODULE_2) ], HAL_LL_UART_IRQ_RX );
0x0AB8	0x4814    LDR	R0, [PC, #80]
0x0ABA	0x6800    LDR	R0, [R0, #0]
0x0ABC	0x2100    MOVS	R1, #0
0x0ABE	0x4C14    LDR	R4, [PC, #80]
0x0AC0	0x6824    LDR	R4, [R4, #0]
0x0AC2	0x47A0    BLX	R4
;hal_ll_uart.c, 1116 :: 		}
L_UART2_IRQHandler49:
;hal_ll_uart.c, 1117 :: 		}
L_UART2_IRQHandler46:
;hal_ll_uart.c, 1118 :: 		if( hal_ll_uart_get_status_flags( HAL_LL_UART2_BASE_ADDRESS , HAL_LL_UART_STATUS_TXE_FLAG ) ) {
0x0AC4	0x480F    LDR	R0, [PC, #60]
0x0AC6	0x6800    LDR	R0, [R0, #0]
0x0AC8	0xF0000080  AND	R0, R0, #128
0x0ACC	0xB1A8    CBZ	R0, L_UART2_IRQHandler50
;hal_ll_uart.c, 1119 :: 		if( ( __HAL_LL_UART_GET_IT_SOURCE( HAL_LL_UART2_BASE_ADDRESS, HAL_LL_UART_IT_TXE ) ) != 0 ) {
0x0ACE	0x480E    LDR	R0, [PC, #56]
0x0AD0	0x6800    LDR	R0, [R0, #0]
0x0AD2	0xF0000080  AND	R0, R0, #128
0x0AD6	0xB110    CBZ	R0, L_UART2_IRQHandler51
0x0AD8	0x2001    MOVS	R0, #1
0x0ADA	0xB240    SXTB	R0, R0
0x0ADC	0xE001    B	L_UART2_IRQHandler52
L_UART2_IRQHandler51:
0x0ADE	0x2000    MOVS	R0, #0
0x0AE0	0xB240    SXTB	R0, R0
L_UART2_IRQHandler52:
0x0AE2	0xB150    CBZ	R0, L_UART2_IRQHandler53
;hal_ll_uart.c, 1120 :: 		hal_ll_uart_clear_status_flag( HAL_LL_UART2_BASE_ADDRESS, HAL_LL_UART_STATUS_TXE_FLAG );
0x0AE4	0x490B    LDR	R1, [PC, #44]
0x0AE6	0x6808    LDR	R0, [R1, #0]
0x0AE8	0xF0400001  ORR	R0, R0, #1
0x0AEC	0x6008    STR	R0, [R1, #0]
;hal_ll_uart.c, 1121 :: 		irq_handler( objects[ hal_ll_uart_module_num(UART_MODULE_2) ], HAL_LL_UART_IRQ_TX );
0x0AEE	0x4807    LDR	R0, [PC, #28]
0x0AF0	0x6800    LDR	R0, [R0, #0]
0x0AF2	0x2101    MOVS	R1, #1
0x0AF4	0x4C06    LDR	R4, [PC, #24]
0x0AF6	0x6824    LDR	R4, [R4, #0]
0x0AF8	0x47A0    BLX	R4
;hal_ll_uart.c, 1122 :: 		}
L_UART2_IRQHandler53:
;hal_ll_uart.c, 1123 :: 		}
L_UART2_IRQHandler50:
;hal_ll_uart.c, 1124 :: 		}
L_end_UART2_IRQHandler:
0x0AFA	0xF8DDE000  LDR	LR, [SP, #0]
0x0AFE	0xB001    ADD	SP, SP, #4
0x0B00	0xBC30    POP	(R4, R5)
0x0B02	0x4770    BX	LR
0x0B04	0x441C4000  	#1073759260
0x0B08	0x44004000  	#1073759232
0x0B0C	0x00982000  	hal_ll_uart_objects+4
0x0B10	0x00902000  	hal_ll_uart_irq_handler+0
0x0B14	0x44204000  	#1073759264
; end of _UART2_IRQHandler
_hal_uart_irq_handler:
;hal_uart.c, 372 :: 		void hal_uart_irq_handler( handle_t obj, hal_uart_irq_t event )
0x0844	0xB083    SUB	SP, SP, #12
0x0846	0xF8CDE000  STR	LR, [SP, #0]
0x084A	0xF88D1008  STRB	R1, [SP, #8]
;hal_uart.c, 374 :: 		hal_uart_t *hal_obj = ( hal_uart_t* )obj;
0x084E	0x9001    STR	R0, [SP, #4]
;hal_uart.c, 377 :: 		if ( event == HAL_UART_IRQ_RX )
0x0850	0xF89D2008  LDRB	R2, [SP, #8]
0x0854	0xB9D2    CBNZ	R2, L_hal_uart_irq_handler68
;hal_uart.c, 380 :: 		if ( ring_buf8_is_full( &hal_obj->config.rx_buf ) )
0x0856	0x9A01    LDR	R2, [SP, #4]
0x0858	0x1D12    ADDS	R2, R2, #4
0x085A	0x3220    ADDS	R2, #32
0x085C	0x4610    MOV	R0, R2
0x085E	0xF7FFFF23  BL	_ring_buf8_is_full+0
0x0862	0xB148    CBZ	R0, L_hal_uart_irq_handler69
;hal_uart.c, 382 :: 		hal_ll_uart_irq_disable( &hal_obj->handle, HAL_UART_IRQ_RX );
0x0864	0x2100    MOVS	R1, #0
0x0866	0x9801    LDR	R0, [SP, #4]
0x0868	0xF7FFFF2C  BL	_hal_ll_uart_irq_disable+0
;hal_uart.c, 383 :: 		hal_obj->is_rx_irq_enabled = false;
0x086C	0x9A01    LDR	R2, [SP, #4]
0x086E	0xF2020349  ADDW	R3, R2, #73
0x0872	0x2200    MOVS	R2, #0
0x0874	0x701A    STRB	R2, [R3, #0]
;hal_uart.c, 384 :: 		return;
0x0876	0xE02C    B	L_end_hal_uart_irq_handler
;hal_uart.c, 385 :: 		}
L_hal_uart_irq_handler69:
;hal_uart.c, 387 :: 		rd_data = hal_ll_uart_read( &hal_obj->handle );
0x0878	0x9801    LDR	R0, [SP, #4]
0x087A	0xF7FFFEF5  BL	_hal_ll_uart_read+0
;hal_uart.c, 388 :: 		ring_buf8_push( &hal_obj->config.rx_buf, rd_data );
0x087E	0x9A01    LDR	R2, [SP, #4]
0x0880	0x1D12    ADDS	R2, R2, #4
0x0882	0x3220    ADDS	R2, #32
0x0884	0xB2C1    UXTB	R1, R0
0x0886	0x4610    MOV	R0, R2
0x0888	0xF7FFFF66  BL	_ring_buf8_push+0
;hal_uart.c, 389 :: 		}
L_hal_uart_irq_handler68:
;hal_uart.c, 392 :: 		if ( event == HAL_UART_IRQ_TX )
0x088C	0xF89D2008  LDRB	R2, [SP, #8]
0x0890	0x2A01    CMP	R2, #1
0x0892	0xD11E    BNE	L_hal_uart_irq_handler70
;hal_uart.c, 396 :: 		wr_data = ring_buf8_pop( &hal_obj->config.tx_buf );
0x0894	0x9A01    LDR	R2, [SP, #4]
0x0896	0x1D12    ADDS	R2, R2, #4
0x0898	0x320C    ADDS	R2, #12
0x089A	0x4610    MOV	R0, R2
0x089C	0xF7FFFF92  BL	_ring_buf8_pop+0
;hal_uart.c, 397 :: 		hal_ll_uart_write( &hal_obj->handle, wr_data );
0x08A0	0xB2C1    UXTB	R1, R0
0x08A2	0x9801    LDR	R0, [SP, #4]
0x08A4	0xF7FFFF7C  BL	_hal_ll_uart_write+0
;hal_uart.c, 399 :: 		if ( hal_obj->is_tx_irq_enabled && ring_buf8_is_empty( &hal_obj->config.tx_buf ) )
0x08A8	0x9A01    LDR	R2, [SP, #4]
0x08AA	0x3248    ADDS	R2, #72
0x08AC	0x7812    LDRB	R2, [R2, #0]
0x08AE	0xB182    CBZ	R2, L__hal_uart_irq_handler100
0x08B0	0x9A01    LDR	R2, [SP, #4]
0x08B2	0x1D12    ADDS	R2, R2, #4
0x08B4	0x320C    ADDS	R2, #12
0x08B6	0x4610    MOV	R0, R2
0x08B8	0xF7FFFFB8  BL	_ring_buf8_is_empty+0
0x08BC	0xB148    CBZ	R0, L__hal_uart_irq_handler99
L__hal_uart_irq_handler98:
;hal_uart.c, 401 :: 		hal_ll_uart_irq_disable( &hal_obj->handle, HAL_UART_IRQ_TX );
0x08BE	0x2101    MOVS	R1, #1
0x08C0	0x9801    LDR	R0, [SP, #4]
0x08C2	0xF7FFFEFF  BL	_hal_ll_uart_irq_disable+0
;hal_uart.c, 402 :: 		hal_obj->is_tx_irq_enabled = false;
0x08C6	0x9A01    LDR	R2, [SP, #4]
0x08C8	0xF2020348  ADDW	R3, R2, #72
0x08CC	0x2200    MOVS	R2, #0
0x08CE	0x701A    STRB	R2, [R3, #0]
;hal_uart.c, 403 :: 		return;
0x08D0	0xE7FF    B	L_end_hal_uart_irq_handler
;hal_uart.c, 399 :: 		if ( hal_obj->is_tx_irq_enabled && ring_buf8_is_empty( &hal_obj->config.tx_buf ) )
L__hal_uart_irq_handler100:
L__hal_uart_irq_handler99:
;hal_uart.c, 405 :: 		}
L_hal_uart_irq_handler70:
;hal_uart.c, 406 :: 		}
L_end_hal_uart_irq_handler:
0x08D2	0xF8DDE000  LDR	LR, [SP, #0]
0x08D6	0xB003    ADD	SP, SP, #12
0x08D8	0x4770    BX	LR
; end of _hal_uart_irq_handler
_ring_buf8_is_full:
;ring.c, 87 :: 		bool ring_buf8_is_full( ring_buf8_t *ring )
0x06A8	0xB081    SUB	SP, SP, #4
;ring.c, 89 :: 		return ring->size == ring->capacity;
0x06AA	0xF2000108  ADDW	R1, R0, #8
0x06AE	0x680A    LDR	R2, [R1, #0]
0x06B0	0x1D01    ADDS	R1, R0, #4
0x06B2	0x6809    LDR	R1, [R1, #0]
0x06B4	0x428A    CMP	R2, R1
0x06B6	0xF2400100  MOVW	R1, #0
0x06BA	0xD100    BNE	L__ring_buf8_is_full9
0x06BC	0x2101    MOVS	R1, #1
L__ring_buf8_is_full9:
0x06BE	0xB2C8    UXTB	R0, R1
;ring.c, 90 :: 		}
L_end_ring_buf8_is_full:
0x06C0	0xB001    ADD	SP, SP, #4
0x06C2	0x4770    BX	LR
; end of _ring_buf8_is_full
_hal_ll_uart_irq_disable:
;hal_ll_uart.c, 848 :: 		void hal_ll_uart_irq_disable( handle_t *handle, hal_ll_uart_irq_t irq )
0x06C4	0xB082    SUB	SP, SP, #8
0x06C6	0xF8CDE000  STR	LR, [SP, #0]
0x06CA	0xB2CD    UXTB	R5, R1
;hal_ll_uart.c, 850 :: 		low_level_handle = hal_ll_uart_get_handle;
0x06CC	0x6802    LDR	R2, [R0, #0]
0x06CE	0x6813    LDR	R3, [R2, #0]
0x06D0	0x4A1F    LDR	R2, [PC, #124]
0x06D2	0x6013    STR	R3, [R2, #0]
;hal_ll_uart.c, 851 :: 		hal_ll_uart_hw_specifics_map_local = hal_ll_get_specifics(hal_ll_uart_get_module_state_address);
0x06D4	0x6800    LDR	R0, [R0, #0]
0x06D6	0xF7FFFF81  BL	hal_ll_uart_hal_ll_get_specifics+0
0x06DA	0x4A1E    LDR	R2, [PC, #120]
0x06DC	0x6010    STR	R0, [R2, #0]
;hal_ll_uart.c, 853 :: 		hal_ll_uart_base_handle_t *hal_ll_hw_reg = ( hal_ll_uart_base_handle_t *)hal_ll_uart_hw_specifics_map_local->base;
0x06DE	0x6802    LDR	R2, [R0, #0]
0x06E0	0x4610    MOV	R0, R2
;hal_ll_uart.c, 855 :: 		switch ( irq ) {
0x06E2	0xE00E    B	L_hal_ll_uart_irq_disable20
;hal_ll_uart.c, 856 :: 		case HAL_LL_UART_IRQ_RX:
L_hal_ll_uart_irq_disable22:
;hal_ll_uart.c, 857 :: 		__HAL_LL_UART_DISABLE_IT( hal_ll_hw_reg, HAL_LL_UART_IT_RXNE );
0x06E4	0x6803    LDR	R3, [R0, #0]
0x06E6	0xF06F0220  MVN	R2, #32
0x06EA	0xEA030202  AND	R2, R3, R2, LSL #0
0x06EE	0x6002    STR	R2, [R0, #0]
;hal_ll_uart.c, 858 :: 		break;
0x06F0	0xE00C    B	L_hal_ll_uart_irq_disable21
;hal_ll_uart.c, 860 :: 		case HAL_LL_UART_IRQ_TX:
L_hal_ll_uart_irq_disable25:
;hal_ll_uart.c, 861 :: 		__HAL_LL_UART_DISABLE_IT( hal_ll_hw_reg, HAL_LL_UART_IT_TXE );
0x06F2	0x6803    LDR	R3, [R0, #0]
0x06F4	0xF06F0280  MVN	R2, #128
0x06F8	0xEA030202  AND	R2, R3, R2, LSL #0
0x06FC	0x6002    STR	R2, [R0, #0]
;hal_ll_uart.c, 862 :: 		break;
0x06FE	0xE005    B	L_hal_ll_uart_irq_disable21
;hal_ll_uart.c, 864 :: 		default:
L_hal_ll_uart_irq_disable28:
;hal_ll_uart.c, 865 :: 		break;
0x0700	0xE004    B	L_hal_ll_uart_irq_disable21
;hal_ll_uart.c, 866 :: 		}
L_hal_ll_uart_irq_disable20:
0x0702	0x2D00    CMP	R5, #0
0x0704	0xD0EE    BEQ	L_hal_ll_uart_irq_disable22
0x0706	0x2D01    CMP	R5, #1
0x0708	0xD0F3    BEQ	L_hal_ll_uart_irq_disable25
0x070A	0xE7F9    B	L_hal_ll_uart_irq_disable28
L_hal_ll_uart_irq_disable21:
;hal_ll_uart.c, 869 :: 		if ( ( !check_reg_bit( &hal_ll_hw_reg->cr1, HAL_LL_UART_ISR_RXNE ) ) &&
0x070C	0x6802    LDR	R2, [R0, #0]
0x070E	0xF0020220  AND	R2, R2, #32
;hal_ll_uart.c, 870 :: 		( !check_reg_bit( &hal_ll_hw_reg->cr1, HAL_LL_UART_ISR_TXE ) ) )
0x0712	0xB9CA    CBNZ	R2, L__hal_ll_uart_irq_disable143
0x0714	0x6802    LDR	R2, [R0, #0]
0x0716	0xF0020280  AND	R2, R2, #128
0x071A	0xB9AA    CBNZ	R2, L__hal_ll_uart_irq_disable142
L__hal_ll_uart_irq_disable141:
;hal_ll_uart.c, 872 :: 		switch ( hal_ll_uart_hw_specifics_map_local->module_index )
0x071C	0x4A0D    LDR	R2, [PC, #52]
0x071E	0x6812    LDR	R2, [R2, #0]
0x0720	0x1D12    ADDS	R2, R2, #4
0x0722	0x9201    STR	R2, [SP, #4]
0x0724	0xE008    B	L_hal_ll_uart_irq_disable32
;hal_ll_uart.c, 875 :: 		case hal_ll_uart_module_num(UART_MODULE_1):
L_hal_ll_uart_irq_disable34:
;hal_ll_uart.c, 876 :: 		hal_ll_core_disable_irq( UART1_NVIC );
0x0726	0x2035    MOVS	R0, #53
0x0728	0xF7FFFF94  BL	_hal_ll_core_disable_irq+0
;hal_ll_uart.c, 877 :: 		break;
0x072C	0xE00C    B	L_hal_ll_uart_irq_disable33
;hal_ll_uart.c, 900 :: 		case hal_ll_uart_module_num(UART_MODULE_2):
L_hal_ll_uart_irq_disable35:
;hal_ll_uart.c, 901 :: 		hal_ll_core_disable_irq( UART2_NVIC );
0x072E	0x2036    MOVS	R0, #54
0x0730	0xF7FFFF90  BL	_hal_ll_core_disable_irq+0
;hal_ll_uart.c, 902 :: 		break;
0x0734	0xE008    B	L_hal_ll_uart_irq_disable33
;hal_ll_uart.c, 1000 :: 		default:
L_hal_ll_uart_irq_disable36:
;hal_ll_uart.c, 1001 :: 		break;
0x0736	0xE007    B	L_hal_ll_uart_irq_disable33
;hal_ll_uart.c, 1002 :: 		}
L_hal_ll_uart_irq_disable32:
0x0738	0x9B01    LDR	R3, [SP, #4]
0x073A	0x881A    LDRH	R2, [R3, #0]
0x073C	0x2A00    CMP	R2, #0
0x073E	0xD0F2    BEQ	L_hal_ll_uart_irq_disable34
0x0740	0x881A    LDRH	R2, [R3, #0]
0x0742	0x2A01    CMP	R2, #1
0x0744	0xD0F3    BEQ	L_hal_ll_uart_irq_disable35
0x0746	0xE7F6    B	L_hal_ll_uart_irq_disable36
L_hal_ll_uart_irq_disable33:
;hal_ll_uart.c, 870 :: 		( !check_reg_bit( &hal_ll_hw_reg->cr1, HAL_LL_UART_ISR_TXE ) ) )
L__hal_ll_uart_irq_disable143:
L__hal_ll_uart_irq_disable142:
;hal_ll_uart.c, 1004 :: 		}
L_end_hal_ll_uart_irq_disable:
0x0748	0xF8DDE000  LDR	LR, [SP, #0]
0x074C	0xB002    ADD	SP, SP, #8
0x074E	0x4770    BX	LR
0x0750	0x00A02000  	hal_ll_uart_low_level_handle+0
0x0754	0x009C2000  	hal_ll_uart_hal_ll_uart_hw_specifics_map_local+0
; end of _hal_ll_uart_irq_disable
hal_ll_uart_hal_ll_get_specifics:
;hal_ll_uart.c, 1538 :: 		static hal_ll_uart_hw_specifics_map_t *hal_ll_get_specifics( handle_t handle ) {
0x05DC	0xB081    SUB	SP, SP, #4
;hal_ll_uart.c, 1539 :: 		uint8_t hal_ll_module_count = sizeof(hal_ll_module_state) / (sizeof(hal_ll_uart_handle_register_t));
0x05DE	0x2202    MOVS	R2, #2
;hal_ll_uart.c, 1540 :: 		static uint8_t hal_ll_module_error = hal_ll_module_count;
0x05E0	0x4911    LDR	R1, [PC, #68]
0x05E2	0x700A    STRB	R2, [R1, #0]
0x05E4	0xB2D3    UXTB	R3, R2
;hal_ll_uart.c, 1542 :: 		while( hal_ll_module_count-- ) {
L_hal_ll_uart_hal_ll_get_specifics73:
0x05E6	0xB2DA    UXTB	R2, R3
0x05E8	0x1E59    SUBS	R1, R3, #1
0x05EA	0xB2CC    UXTB	R4, R1
0x05EC	0xB19A    CBZ	R2, L_hal_ll_uart_hal_ll_get_specifics74
;hal_ll_uart.c, 1543 :: 		if (hal_ll_uart_get_base_from_hal_handle == hal_ll_uart_hw_specifics_map[hal_ll_module_count].base) {
0x05EE	0x6801    LDR	R1, [R0, #0]
0x05F0	0x6809    LDR	R1, [R1, #0]
0x05F2	0x680B    LDR	R3, [R1, #0]
0x05F4	0x2124    MOVS	R1, #36
0x05F6	0xFB01F204  MUL	R2, R1, R4
0x05FA	0x490C    LDR	R1, [PC, #48]
0x05FC	0x1889    ADDS	R1, R1, R2
0x05FE	0x6809    LDR	R1, [R1, #0]
0x0600	0x428B    CMP	R3, R1
0x0602	0xD106    BNE	L_hal_ll_uart_hal_ll_get_specifics75
;hal_ll_uart.c, 1544 :: 		return &hal_ll_uart_hw_specifics_map[hal_ll_module_count];
0x0604	0x2124    MOVS	R1, #36
0x0606	0xFB01F204  MUL	R2, R1, R4
0x060A	0x4908    LDR	R1, [PC, #32]
0x060C	0x1889    ADDS	R1, R1, R2
0x060E	0x4608    MOV	R0, R1
0x0610	0xE008    B	L_end_hal_ll_get_specifics
;hal_ll_uart.c, 1545 :: 		}
L_hal_ll_uart_hal_ll_get_specifics75:
;hal_ll_uart.c, 1546 :: 		}
0x0612	0xB2E3    UXTB	R3, R4
0x0614	0xE7E7    B	L_hal_ll_uart_hal_ll_get_specifics73
L_hal_ll_uart_hal_ll_get_specifics74:
;hal_ll_uart.c, 1548 :: 		return &hal_ll_uart_hw_specifics_map[hal_ll_module_error];
0x0616	0x4904    LDR	R1, [PC, #16]
0x0618	0x780A    LDRB	R2, [R1, #0]
0x061A	0x2124    MOVS	R1, #36
0x061C	0x434A    MULS	R2, R1, R2
0x061E	0x4903    LDR	R1, [PC, #12]
0x0620	0x1889    ADDS	R1, R1, R2
0x0622	0x4608    MOV	R0, R1
;hal_ll_uart.c, 1549 :: 		}
L_end_hal_ll_get_specifics:
0x0624	0xB001    ADD	SP, SP, #4
0x0626	0x4770    BX	LR
0x0628	0x00A42000  	hal_ll_uart_hal_ll_get_specifics_hal_ll_module_error_L0+0
0x062C	0x00182000  	hal_ll_uart_hal_ll_uart_hw_specifics_map+0
; end of hal_ll_uart_hal_ll_get_specifics
_hal_ll_core_disable_irq:
;hal_ll_core.c, 63 :: 		void hal_ll_core_disable_irq( uint8_t IRQn )
0x0654	0xB081    SUB	SP, SP, #4
0x0656	0xF8CDE000  STR	LR, [SP, #0]
;hal_ll_core.c, 65 :: 		hal_ll_core_port_nvic_disable_irq( IRQn );
0x065A	0xF7FFFF47  BL	_hal_ll_core_port_nvic_disable_irq+0
;hal_ll_core.c, 66 :: 		}
L_end_hal_ll_core_disable_irq:
0x065E	0xF8DDE000  LDR	LR, [SP, #0]
0x0662	0xB001    ADD	SP, SP, #4
0x0664	0x4770    BX	LR
; end of _hal_ll_core_disable_irq
_hal_ll_core_port_nvic_disable_irq:
;hal_ll_core_port.c, 80 :: 		void hal_ll_core_port_nvic_disable_irq( uint8_t IRQn )
0x04EC	0xB081    SUB	SP, SP, #4
;hal_ll_core_port.c, 82 :: 		switch ( IRQn )
0x04EE	0xE020    B	L_hal_ll_core_port_nvic_disable_irq12
;hal_ll_core_port.c, 84 :: 		case HAL_LL_CORE_IVT_INT_MEM_MANAGE:
L_hal_ll_core_port_nvic_disable_irq14:
;hal_ll_core_port.c, 85 :: 		clear_reg_bit( HAL_LL_CORE_SCB_SHCRS, HAL_LL_CORE_IVT_MEMFAULTENA_BIT );
0x04F0	0x4B2E    LDR	R3, [PC, #184]
0x04F2	0x681A    LDR	R2, [R3, #0]
0x04F4	0xF46F3180  MVN	R1, #65536
0x04F8	0xEA020101  AND	R1, R2, R1, LSL #0
0x04FC	0x6019    STR	R1, [R3, #0]
;hal_ll_core_port.c, 86 :: 		break;
0x04FE	0xE021    B	L_hal_ll_core_port_nvic_disable_irq13
;hal_ll_core_port.c, 87 :: 		case HAL_LL_CORE_IVT_INT_BUS_FAULT:
L_hal_ll_core_port_nvic_disable_irq15:
;hal_ll_core_port.c, 88 :: 		clear_reg_bit( HAL_LL_CORE_SCB_SHCRS, HAL_LL_CORE_IVT_BUSFAULTENA_BIT );
0x0500	0x4B2B    LDR	R3, [PC, #172]
0x0502	0x681A    LDR	R2, [R3, #0]
0x0504	0xF46F3100  MVN	R1, #131072
0x0508	0xEA020101  AND	R1, R2, R1, LSL #0
0x050C	0x6019    STR	R1, [R3, #0]
;hal_ll_core_port.c, 89 :: 		break;
0x050E	0xE019    B	L_hal_ll_core_port_nvic_disable_irq13
;hal_ll_core_port.c, 90 :: 		case HAL_LL_CORE_IVT_INT_USAGE_FAULT:
L_hal_ll_core_port_nvic_disable_irq16:
;hal_ll_core_port.c, 91 :: 		clear_reg_bit( HAL_LL_CORE_SCB_SHCRS, HAL_LL_CORE_IVT_USGFAULTENA_BIT );
0x0510	0x4B28    LDR	R3, [PC, #160]
0x0512	0x681A    LDR	R2, [R3, #0]
0x0514	0xF46F2180  MVN	R1, #262144
0x0518	0xEA020101  AND	R1, R2, R1, LSL #0
0x051C	0x6019    STR	R1, [R3, #0]
;hal_ll_core_port.c, 92 :: 		break;
0x051E	0xE011    B	L_hal_ll_core_port_nvic_disable_irq13
;hal_ll_core_port.c, 93 :: 		case HAL_LL_CORE_IVT_INT_SYS_TICK:
L_hal_ll_core_port_nvic_disable_irq17:
;hal_ll_core_port.c, 94 :: 		clear_reg_bit( HAL_LL_CORE_STK_CTRL, HAL_LL_CORE_IVT_TICKINT_BIT );
0x0520	0x4B25    LDR	R3, [PC, #148]
0x0522	0x681A    LDR	R2, [R3, #0]
0x0524	0xF06F0102  MVN	R1, #2
0x0528	0xEA020101  AND	R1, R2, R1, LSL #0
0x052C	0x6019    STR	R1, [R3, #0]
;hal_ll_core_port.c, 95 :: 		break;
0x052E	0xE009    B	L_hal_ll_core_port_nvic_disable_irq13
;hal_ll_core_port.c, 97 :: 		default: // If none of the above, exit switch
L_hal_ll_core_port_nvic_disable_irq18:
;hal_ll_core_port.c, 98 :: 		break;
0x0530	0xE008    B	L_hal_ll_core_port_nvic_disable_irq13
;hal_ll_core_port.c, 99 :: 		}
L_hal_ll_core_port_nvic_disable_irq12:
0x0532	0x2804    CMP	R0, #4
0x0534	0xD0DC    BEQ	L_hal_ll_core_port_nvic_disable_irq14
0x0536	0x2805    CMP	R0, #5
0x0538	0xD0E2    BEQ	L_hal_ll_core_port_nvic_disable_irq15
0x053A	0x2806    CMP	R0, #6
0x053C	0xD0E8    BEQ	L_hal_ll_core_port_nvic_disable_irq16
0x053E	0x280F    CMP	R0, #15
0x0540	0xD0EE    BEQ	L_hal_ll_core_port_nvic_disable_irq17
0x0542	0xE7F5    B	L_hal_ll_core_port_nvic_disable_irq18
L_hal_ll_core_port_nvic_disable_irq13:
;hal_ll_core_port.c, 102 :: 		if ( IRQn >= 80 )
0x0544	0x2850    CMP	R0, #80
0x0546	0xD30E    BCC	L_hal_ll_core_port_nvic_disable_irq19
;hal_ll_core_port.c, 104 :: 		set_reg_bit( HAL_LL_CORE_NVIC_ICER_2, ( ( hal_ll_core_irq( IRQn ) ) & HAL_LL_CORE_IRQ_MASK ) );
0x0548	0xF2A00110  SUBW	R1, R0, #16
0x054C	0xB209    SXTH	R1, R1
0x054E	0xF001021F  AND	R2, R1, #31
0x0552	0xB212    SXTH	R2, R2
0x0554	0xF04F0101  MOV	R1, #1
0x0558	0xFA01F302  LSL	R3, R1, R2
0x055C	0x4A17    LDR	R2, [PC, #92]
0x055E	0x6811    LDR	R1, [R2, #0]
0x0560	0x4319    ORRS	R1, R3
0x0562	0x6011    STR	R1, [R2, #0]
;hal_ll_core_port.c, 105 :: 		} else if ( IRQn >= 48 ) {
0x0564	0xE020    B	L_hal_ll_core_port_nvic_disable_irq20
L_hal_ll_core_port_nvic_disable_irq19:
0x0566	0x2830    CMP	R0, #48
0x0568	0xD30E    BCC	L_hal_ll_core_port_nvic_disable_irq21
;hal_ll_core_port.c, 106 :: 		set_reg_bit( HAL_LL_CORE_NVIC_ICER_1, ( ( hal_ll_core_irq( IRQn ) ) & HAL_LL_CORE_IRQ_MASK ) );
0x056A	0xF2A00110  SUBW	R1, R0, #16
0x056E	0xB209    SXTH	R1, R1
0x0570	0xF001021F  AND	R2, R1, #31
0x0574	0xB212    SXTH	R2, R2
0x0576	0xF04F0101  MOV	R1, #1
0x057A	0xFA01F302  LSL	R3, R1, R2
0x057E	0x4A10    LDR	R2, [PC, #64]
0x0580	0x6811    LDR	R1, [R2, #0]
0x0582	0x4319    ORRS	R1, R3
0x0584	0x6011    STR	R1, [R2, #0]
;hal_ll_core_port.c, 107 :: 		} else if ( IRQn >= 16 ) {
0x0586	0xE00F    B	L_hal_ll_core_port_nvic_disable_irq22
L_hal_ll_core_port_nvic_disable_irq21:
0x0588	0x2810    CMP	R0, #16
0x058A	0xD30D    BCC	L_hal_ll_core_port_nvic_disable_irq23
;hal_ll_core_port.c, 108 :: 		set_reg_bit( HAL_LL_CORE_NVIC_ICER_0, ( ( hal_ll_core_irq( IRQn ) ) & HAL_LL_CORE_IRQ_MASK ) );
0x058C	0xF2A00110  SUBW	R1, R0, #16
0x0590	0xB209    SXTH	R1, R1
0x0592	0xF001021F  AND	R2, R1, #31
0x0596	0xB212    SXTH	R2, R2
0x0598	0xF04F0101  MOV	R1, #1
0x059C	0xFA01F302  LSL	R3, R1, R2
0x05A0	0x4A08    LDR	R2, [PC, #32]
0x05A2	0x6811    LDR	R1, [R2, #0]
0x05A4	0x4319    ORRS	R1, R3
0x05A6	0x6011    STR	R1, [R2, #0]
;hal_ll_core_port.c, 109 :: 		}
L_hal_ll_core_port_nvic_disable_irq23:
L_hal_ll_core_port_nvic_disable_irq22:
L_hal_ll_core_port_nvic_disable_irq20:
;hal_ll_core_port.c, 110 :: 		}
L_end_hal_ll_core_port_nvic_disable_irq:
0x05A8	0xB001    ADD	SP, SP, #4
0x05AA	0x4770    BX	LR
0x05AC	0xED24E000  	3758157092
0x05B0	0xED24E000  	3758157092
0x05B4	0xED24E000  	3758157092
0x05B8	0xE010E000  	3758153744
0x05BC	0xE188E000  	3758154120
0x05C0	0xE184E000  	3758154116
0x05C4	0xE180E000  	3758154112
; end of _hal_ll_core_port_nvic_disable_irq
_hal_ll_uart_read:
;hal_ll_uart.c, 1013 :: 		uint16_t hal_ll_uart_read( handle_t *handle ) {
0x0668	0xB081    SUB	SP, SP, #4
0x066A	0xF8CDE000  STR	LR, [SP, #0]
;hal_ll_uart.c, 1014 :: 		hal_ll_uart_hw_specifics_map_local = hal_ll_get_specifics(hal_ll_uart_get_module_state_address);
0x066E	0x6800    LDR	R0, [R0, #0]
0x0670	0xF7FFFFB4  BL	hal_ll_uart_hal_ll_get_specifics+0
0x0674	0x490B    LDR	R1, [PC, #44]
0x0676	0x6008    STR	R0, [R1, #0]
;hal_ll_uart.c, 1015 :: 		hal_ll_uart_base_handle_t *hal_ll_hw_reg = ( hal_ll_uart_base_handle_t *)hal_ll_uart_hw_specifics_map_local->base;
0x0678	0x6801    LDR	R1, [R0, #0]
0x067A	0x4608    MOV	R0, R1
;hal_ll_uart.c, 1017 :: 		if ( check_reg_bit( &hal_ll_hw_reg->isr, HAL_LL_UART_ISR_ICR_ORE ) ) {
0x067C	0x311C    ADDS	R1, #28
0x067E	0x6809    LDR	R1, [R1, #0]
0x0680	0xF0010108  AND	R1, R1, #8
0x0684	0xB129    CBZ	R1, L_hal_ll_uart_read37
;hal_ll_uart.c, 1018 :: 		set_reg_bit( &hal_ll_hw_reg->icr, HAL_LL_UART_ISR_ICR_ORE );
0x0686	0xF2000220  ADDW	R2, R0, #32
0x068A	0x6811    LDR	R1, [R2, #0]
0x068C	0xF0410108  ORR	R1, R1, #8
0x0690	0x6011    STR	R1, [R2, #0]
;hal_ll_uart.c, 1019 :: 		}
L_hal_ll_uart_read37:
;hal_ll_uart.c, 1021 :: 		return ( hal_ll_hw_reg->rdr );
0x0692	0xF2000124  ADDW	R1, R0, #36
0x0696	0x6809    LDR	R1, [R1, #0]
0x0698	0xB288    UXTH	R0, R1
;hal_ll_uart.c, 1022 :: 		}
L_end_hal_ll_uart_read:
0x069A	0xF8DDE000  LDR	LR, [SP, #0]
0x069E	0xB001    ADD	SP, SP, #4
0x06A0	0x4770    BX	LR
0x06A2	0xBF00    NOP
0x06A4	0x009C2000  	hal_ll_uart_hal_ll_uart_hw_specifics_map_local+0
; end of _hal_ll_uart_read
_ring_buf8_push:
;ring.c, 57 :: 		bool ring_buf8_push( ring_buf8_t *ring, uint8_t data_ )
0x0758	0xB081    SUB	SP, SP, #4
;ring.c, 59 :: 		if ( ring->size == ring->capacity ) {
0x075A	0xF2000208  ADDW	R2, R0, #8
0x075E	0x6813    LDR	R3, [R2, #0]
0x0760	0x1D02    ADDS	R2, R0, #4
0x0762	0x6812    LDR	R2, [R2, #0]
0x0764	0x4293    CMP	R3, R2
0x0766	0xD101    BNE	L_ring_buf8_push0
;ring.c, 60 :: 		return false;
0x0768	0x2000    MOVS	R0, #0
0x076A	0xE016    B	L_end_ring_buf8_push
;ring.c, 61 :: 		}
L_ring_buf8_push0:
;ring.c, 63 :: 		ring->buffer[ ring->head ] = data_;
0x076C	0xF200020C  ADDW	R2, R0, #12
0x0770	0x6813    LDR	R3, [R2, #0]
0x0772	0x6802    LDR	R2, [R0, #0]
0x0774	0x18D2    ADDS	R2, R2, R3
0x0776	0x7011    STRB	R1, [R2, #0]
;ring.c, 64 :: 		ring->head = ( ring->head + 1 ) % ring->capacity;
0x0778	0xF200050C  ADDW	R5, R0, #12
0x077C	0x682A    LDR	R2, [R5, #0]
0x077E	0x1C54    ADDS	R4, R2, #1
0x0780	0x1D02    ADDS	R2, R0, #4
0x0782	0x6813    LDR	R3, [R2, #0]
0x0784	0xFBB4F2F3  UDIV	R2, R4, R3
0x0788	0xFB034212  MLS	R2, R3, R2, R4
0x078C	0x602A    STR	R2, [R5, #0]
;ring.c, 65 :: 		ring->size++;
0x078E	0xF2000308  ADDW	R3, R0, #8
0x0792	0x681A    LDR	R2, [R3, #0]
0x0794	0x1C52    ADDS	R2, R2, #1
0x0796	0x601A    STR	R2, [R3, #0]
;ring.c, 67 :: 		return true;
0x0798	0x2001    MOVS	R0, #1
;ring.c, 68 :: 		}
L_end_ring_buf8_push:
0x079A	0xB001    ADD	SP, SP, #4
0x079C	0x4770    BX	LR
; end of _ring_buf8_push
_ring_buf8_pop:
;ring.c, 70 :: 		uint8_t ring_buf8_pop( ring_buf8_t *ring )
0x07C4	0xB082    SUB	SP, SP, #8
;ring.c, 73 :: 		assert( ring->size > 0 );
0x07C6	0xF2000108  ADDW	R1, R0, #8
0x07CA	0x6809    LDR	R1, [R1, #0]
0x07CC	0x2900    CMP	R1, #0
0x07CE	0xD900    BLS	L_ring_buf8_pop1
0x07D0	0xE7FF    B	L_ring_buf8_pop2
L_ring_buf8_pop1:
L_ring_buf8_pop2:
;ring.c, 75 :: 		result = ring->buffer[ ring->tail ];
0x07D2	0xF2000410  ADDW	R4, R0, #16
0x07D6	0x6822    LDR	R2, [R4, #0]
0x07D8	0x6801    LDR	R1, [R0, #0]
0x07DA	0x1889    ADDS	R1, R1, R2
0x07DC	0x7809    LDRB	R1, [R1, #0]
0x07DE	0xB2CD    UXTB	R5, R1
;ring.c, 76 :: 		ring->tail = ( ring->tail + 1 ) % ring->capacity;
0x07E0	0x1C53    ADDS	R3, R2, #1
0x07E2	0x1D01    ADDS	R1, R0, #4
0x07E4	0x680A    LDR	R2, [R1, #0]
0x07E6	0xFBB3F1F2  UDIV	R1, R3, R2
0x07EA	0xFB023111  MLS	R1, R2, R1, R3
0x07EE	0x6021    STR	R1, [R4, #0]
;ring.c, 77 :: 		ring->size--;
0x07F0	0xF2000208  ADDW	R2, R0, #8
0x07F4	0x6811    LDR	R1, [R2, #0]
0x07F6	0x1E49    SUBS	R1, R1, #1
0x07F8	0x6011    STR	R1, [R2, #0]
;ring.c, 79 :: 		return result;
0x07FA	0xB2E8    UXTB	R0, R5
;ring.c, 80 :: 		}
L_end_ring_buf8_pop:
0x07FC	0xB002    ADD	SP, SP, #8
0x07FE	0x4770    BX	LR
; end of _ring_buf8_pop
_hal_ll_uart_write:
;hal_ll_uart.c, 1006 :: 		void hal_ll_uart_write( handle_t *handle, uint16_t wr_data) {
0x07A0	0xB081    SUB	SP, SP, #4
0x07A2	0xF8CDE000  STR	LR, [SP, #0]
0x07A6	0xB28D    UXTH	R5, R1
;hal_ll_uart.c, 1007 :: 		hal_ll_uart_hw_specifics_map_local = hal_ll_get_specifics(hal_ll_uart_get_module_state_address);
0x07A8	0x6800    LDR	R0, [R0, #0]
0x07AA	0xF7FFFF17  BL	hal_ll_uart_hal_ll_get_specifics+0
0x07AE	0x4A04    LDR	R2, [PC, #16]
0x07B0	0x6010    STR	R0, [R2, #0]
;hal_ll_uart.c, 1008 :: 		hal_ll_uart_base_handle_t *hal_ll_hw_reg = ( hal_ll_uart_base_handle_t *)hal_ll_uart_hw_specifics_map_local->base;
0x07B2	0x6802    LDR	R2, [R0, #0]
;hal_ll_uart.c, 1010 :: 		hal_ll_hw_reg->tdr = wr_data;
0x07B4	0x3228    ADDS	R2, #40
0x07B6	0x6015    STR	R5, [R2, #0]
;hal_ll_uart.c, 1011 :: 		}
L_end_hal_ll_uart_write:
0x07B8	0xF8DDE000  LDR	LR, [SP, #0]
0x07BC	0xB001    ADD	SP, SP, #4
0x07BE	0x4770    BX	LR
0x07C0	0x009C2000  	hal_ll_uart_hal_ll_uart_hw_specifics_map_local+0
; end of _hal_ll_uart_write
_ring_buf8_is_empty:
;ring.c, 82 :: 		bool ring_buf8_is_empty( ring_buf8_t *ring )
0x082C	0xB081    SUB	SP, SP, #4
;ring.c, 84 :: 		return ring->size == 0;
0x082E	0xF2000108  ADDW	R1, R0, #8
0x0832	0x6809    LDR	R1, [R1, #0]
0x0834	0x2900    CMP	R1, #0
0x0836	0xF2400100  MOVW	R1, #0
0x083A	0xD100    BNE	L__ring_buf8_is_empty7
0x083C	0x2101    MOVS	R1, #1
L__ring_buf8_is_empty7:
0x083E	0xB2C8    UXTB	R0, R1
;ring.c, 85 :: 		}
L_end_ring_buf8_is_empty:
0x0840	0xB001    ADD	SP, SP, #4
0x0842	0x4770    BX	LR
; end of _ring_buf8_is_empty
_UART1_IRQHandler:
;hal_ll_uart.c, 1026 :: 		__weak void UART1_IRQHandler(void) MIKROC_IV(UART1_NVIC) {
0x09BC	0xB430    PUSH	(R4, R5)
0x09BE	0xB081    SUB	SP, SP, #4
0x09C0	0xF8CDE000  STR	LR, [SP, #0]
;hal_ll_uart.c, 1027 :: 		if( hal_ll_uart_get_status_flags( HAL_LL_UART1_BASE_ADDRESS , HAL_LL_UART_STATUS_RXNE_FLAG ) ) {
0x09C4	0x481A    LDR	R0, [PC, #104]
0x09C6	0x6800    LDR	R0, [R0, #0]
0x09C8	0xF0000020  AND	R0, R0, #32
0x09CC	0xB180    CBZ	R0, L_UART1_IRQHandler38
;hal_ll_uart.c, 1028 :: 		if( ( __HAL_LL_UART_GET_IT_SOURCE( HAL_LL_UART1_BASE_ADDRESS, HAL_LL_UART_IT_RXNE ) ) != 0 ) {
0x09CE	0x4819    LDR	R0, [PC, #100]
0x09D0	0x6800    LDR	R0, [R0, #0]
0x09D2	0xF0000020  AND	R0, R0, #32
0x09D6	0xB110    CBZ	R0, L_UART1_IRQHandler39
0x09D8	0x2001    MOVS	R0, #1
0x09DA	0xB240    SXTB	R0, R0
0x09DC	0xE001    B	L_UART1_IRQHandler40
L_UART1_IRQHandler39:
0x09DE	0x2000    MOVS	R0, #0
0x09E0	0xB240    SXTB	R0, R0
L_UART1_IRQHandler40:
0x09E2	0xB128    CBZ	R0, L_UART1_IRQHandler41
;hal_ll_uart.c, 1029 :: 		hal_ll_uart_clear_status_flag( HAL_LL_UART1_BASE_ADDRESS, HAL_LL_UART_STATUS_RXNE_FLAG );
;hal_ll_uart.c, 1030 :: 		irq_handler( objects[ hal_ll_uart_module_num(UART_MODULE_1) ], HAL_LL_UART_IRQ_RX );
0x09E4	0x4814    LDR	R0, [PC, #80]
0x09E6	0x6800    LDR	R0, [R0, #0]
0x09E8	0x2100    MOVS	R1, #0
0x09EA	0x4C14    LDR	R4, [PC, #80]
0x09EC	0x6824    LDR	R4, [R4, #0]
0x09EE	0x47A0    BLX	R4
;hal_ll_uart.c, 1031 :: 		}
L_UART1_IRQHandler41:
;hal_ll_uart.c, 1032 :: 		}
L_UART1_IRQHandler38:
;hal_ll_uart.c, 1033 :: 		if( hal_ll_uart_get_status_flags( HAL_LL_UART1_BASE_ADDRESS , HAL_LL_UART_STATUS_TXE_FLAG ) ) {
0x09F0	0x480F    LDR	R0, [PC, #60]
0x09F2	0x6800    LDR	R0, [R0, #0]
0x09F4	0xF0000080  AND	R0, R0, #128
0x09F8	0xB1A8    CBZ	R0, L_UART1_IRQHandler42
;hal_ll_uart.c, 1034 :: 		if( ( __HAL_LL_UART_GET_IT_SOURCE( HAL_LL_UART1_BASE_ADDRESS, HAL_LL_UART_IT_TXE ) ) != 0 ) {
0x09FA	0x480E    LDR	R0, [PC, #56]
0x09FC	0x6800    LDR	R0, [R0, #0]
0x09FE	0xF0000080  AND	R0, R0, #128
0x0A02	0xB110    CBZ	R0, L_UART1_IRQHandler43
0x0A04	0x2001    MOVS	R0, #1
0x0A06	0xB240    SXTB	R0, R0
0x0A08	0xE001    B	L_UART1_IRQHandler44
L_UART1_IRQHandler43:
0x0A0A	0x2000    MOVS	R0, #0
0x0A0C	0xB240    SXTB	R0, R0
L_UART1_IRQHandler44:
0x0A0E	0xB150    CBZ	R0, L_UART1_IRQHandler45
;hal_ll_uart.c, 1035 :: 		hal_ll_uart_clear_status_flag( HAL_LL_UART1_BASE_ADDRESS, HAL_LL_UART_STATUS_TXE_FLAG );
0x0A10	0x490B    LDR	R1, [PC, #44]
0x0A12	0x6808    LDR	R0, [R1, #0]
0x0A14	0xF0400001  ORR	R0, R0, #1
0x0A18	0x6008    STR	R0, [R1, #0]
;hal_ll_uart.c, 1036 :: 		irq_handler( objects[ hal_ll_uart_module_num(UART_MODULE_1) ], HAL_LL_UART_IRQ_TX );
0x0A1A	0x4807    LDR	R0, [PC, #28]
0x0A1C	0x6800    LDR	R0, [R0, #0]
0x0A1E	0x2101    MOVS	R1, #1
0x0A20	0x4C06    LDR	R4, [PC, #24]
0x0A22	0x6824    LDR	R4, [R4, #0]
0x0A24	0x47A0    BLX	R4
;hal_ll_uart.c, 1037 :: 		}
L_UART1_IRQHandler45:
;hal_ll_uart.c, 1038 :: 		}
L_UART1_IRQHandler42:
;hal_ll_uart.c, 1039 :: 		}
L_end_UART1_IRQHandler:
0x0A26	0xF8DDE000  LDR	LR, [SP, #0]
0x0A2A	0xB001    ADD	SP, SP, #4
0x0A2C	0xBC30    POP	(R4, R5)
0x0A2E	0x4770    BX	LR
0x0A30	0x381C4001  	#1073821724
0x0A34	0x38004001  	#1073821696
0x0A38	0x00942000  	hal_ll_uart_objects+0
0x0A3C	0x00902000  	hal_ll_uart_irq_handler+0
0x0A40	0x38204001  	#1073821728
; end of _UART1_IRQHandler
;hal_ll_uart.c,0 :: ?ICShal_ll_uart_hal_ll_module_state [24]
0x0C38	0x00000000 ;?ICShal_ll_uart_hal_ll_module_state+0
0x0C3C	0x00000000 ;?ICShal_ll_uart_hal_ll_module_state+4
0x0C40	0x00000000 ;?ICShal_ll_uart_hal_ll_module_state+8
0x0C44	0x00000000 ;?ICShal_ll_uart_hal_ll_module_state+12
0x0C48	0x00000000 ;?ICShal_ll_uart_hal_ll_module_state+16
0x0C4C	0x00000000 ;?ICShal_ll_uart_hal_ll_module_state+20
; end of ?ICShal_ll_uart_hal_ll_module_state
;hal_ll_uart.c,0 :: ?ICShal_ll_uart_hal_ll_uart_hw_specifics_map [108]
0x0C50	0x40013800 ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+0
0x0C54	0x00000000 ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+4
0x0C58	0x0000FFFF ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+8
0x0C5C	0x00000000 ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+12
0x0C60	0x0000FFFF ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+16
0x0C64	0x00000000 ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+20
0x0C68	0x0001C200 ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+24
0x0C6C	0x00000000 ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+28
0x0C70	0x00010100 ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+32
0x0C74	0x40004400 ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+36
0x0C78	0x00000001 ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+40
0x0C7C	0x0000FFFF ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+44
0x0C80	0x00000000 ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+48
0x0C84	0x0000FFFF ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+52
0x0C88	0x00000000 ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+56
0x0C8C	0x0001C200 ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+60
0x0C90	0x00000000 ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+64
0x0C94	0x00010100 ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+68
0x0C98	0xFFFFFFFF ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+72
0x0C9C	0x0000FFFF ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+76
0x0CA0	0x0000FFFF ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+80
0x0CA4	0x00000000 ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+84
0x0CA8	0x0000FFFF ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+88
0x0CAC	0x00000000 ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+92
0x0CB0	0x00000000 ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+96
0x0CB4	0x00000000 ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+100
0x0CB8	0x00FFFFFF ;?ICShal_ll_uart_hal_ll_uart_hw_specifics_map+104
; end of ?ICShal_ll_uart_hal_ll_uart_hw_specifics_map
;hal_ll_gpio_port.c,220 :: hal_ll_gpio_port__hal_ll_gpio_port_base [44]
0x0CBC	0x48000000 ;hal_ll_gpio_port__hal_ll_gpio_port_base+0
0x0CC0	0x48000400 ;hal_ll_gpio_port__hal_ll_gpio_port_base+4
0x0CC4	0x48000800 ;hal_ll_gpio_port__hal_ll_gpio_port_base+8
0x0CC8	0x48000C00 ;hal_ll_gpio_port__hal_ll_gpio_port_base+12
0x0CCC	0x48001000 ;hal_ll_gpio_port__hal_ll_gpio_port_base+16
0x0CD0	0x48001400 ;hal_ll_gpio_port__hal_ll_gpio_port_base+20
0x0CD4	0x48001800 ;hal_ll_gpio_port__hal_ll_gpio_port_base+24
0x0CD8	0x48001C00 ;hal_ll_gpio_port__hal_ll_gpio_port_base+28
0x0CDC	0x00000000 ;hal_ll_gpio_port__hal_ll_gpio_port_base+32
0x0CE0	0x00000000 ;hal_ll_gpio_port__hal_ll_gpio_port_base+36
0x0CE4	0x00000000 ;hal_ll_gpio_port__hal_ll_gpio_port_base+40
; end of hal_ll_gpio_port__hal_ll_gpio_port_base
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0188      [76]    hal_ll_gpio_port_hal_ll_gpio_clock_enable
0x01D4      [14]    hal_ll_gpio_port_hal_ll_gpio_pin_index
0x01E4     [560]    hal_ll_gpio_port_hal_ll_gpio_config
0x0414      [20]    _hal_ll_gpio_port_base
0x0428      [26]    _hal_ll_gpio_pin_mask
0x0444      [24]    _hal_ll_gpio_digital_output
0x045C      [22]    _hal_ll_gpio_digital_input
0x0474      [12]    _hal_ll_gpio_port_index
0x0480     [108]    _hal_ll_gpio_configure_pin
0x04EC     [220]    _hal_ll_core_port_nvic_disable_irq
0x05C8      [18]    _hal_gpio_configure_pin
0x05DC      [84]    hal_ll_uart_hal_ll_get_specifics
0x0630      [36]    _digital_in_init
0x0654      [18]    _hal_ll_core_disable_irq
0x0668      [64]    _hal_ll_uart_read
0x06A8      [28]    _ring_buf8_is_full
0x06C4     [148]    _hal_ll_uart_irq_disable
0x0758      [70]    _ring_buf8_push
0x07A0      [36]    _hal_ll_uart_write
0x07C4      [60]    _ring_buf8_pop
0x0800      [28]    drv_app_MX_GPIO_Init
0x081C       [6]    drv_app_MX_UART2_Init
0x0824       [6]    drv_app_MX_ADC1_Init
0x082C      [24]    _ring_buf8_is_empty
0x0844     [150]    _hal_uart_irq_handler
0x08DC      [26]    _SystemConfig
0x08F8     [116]    __Lib_System_3XX_SystemClockSetDefault
0x096C      [20]    ___CC2DW
0x0980      [58]    ___FillZeros
0x09BC     [136]    _UART1_IRQHandler
0x0A44      [30]    _main
0x0A64      [42]    ___EnableFPU
0x0A90     [136]    _UART2_IRQHandler
0x0B18       [8]    ___GenExcept
0x0B20     [260]    __Lib_System_3XX_InitialSetUpRCCRCC2
0x0C24      [20]    __Lib_System_3XX_InitialSetUpFosc
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [4]    FARG_analog_in_set_vref_value_vref_value
0x0000       [4]    FARG_hal_ll_adc_set_vref_value_vref_value
0x0000       [4]    FARG_ldexp_num
0x0000       [4]    FARG_modf_num
0x0000       [4]    FARG_ceil_num
0x0000       [4]    FARG_frexp_num
0x0000       [4]    FARG_acos_num
0x0000       [4]    FARG_asin_num
0x0000       [4]    FARG_atan2_y
0x0000       [4]    FARG_atan_num
0x0000       [4]    FARG_sqrt_num
0x0000       [4]    FARG_floor_num
0x0000       [4]    FARG_fabs_num
0x0000       [4]    FARG_tan_num
0x0000       [4]    FARG_cos_num
0x0000       [4]    FARG_cosh_num
0x0000       [4]    FARG_exp_pow
0x0000       [4]    FARG_tanh_num
0x0000       [4]    FARG_pow_num
0x0000       [4]    FARG_log10_num
0x0000       [4]    FARG_log_num
0x0000       [4]    FARG_cmath_eval_poly_num
0x0000       [4]    FARG_sinh_num
0x0000       [4]    FARG_sin_num
0x0004       [4]    FARG_atan2_x
0x0004       [4]    FARG_pow_pow
0x20000000      [24]    hal_ll_uart_hal_ll_module_state
0x20000018     [108]    hal_ll_uart_hal_ll_uart_hw_specifics_map
0x20000084       [8]    _LD2
0x2000008C       [4]    ___System_CLOCK_IN_KHZ
0x20000090       [4]    hal_ll_uart_irq_handler
0x20000094       [8]    hal_ll_uart_objects
0x2000009C       [4]    hal_ll_uart_hal_ll_uart_hw_specifics_map_local
0x200000A0       [4]    hal_ll_uart_low_level_handle
0x200000A4       [1]    hal_ll_uart_hal_ll_get_specifics_hal_ll_module_error_L0
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0C38      [24]    ?ICShal_ll_uart_hal_ll_module_state
0x0C50     [108]    ?ICShal_ll_uart_hal_ll_uart_hw_specifics_map
0x0CBC      [44]    hal_ll_gpio_port__hal_ll_gpio_port_base
