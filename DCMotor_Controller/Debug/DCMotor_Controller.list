
DCMotor_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024c8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800265c  0800265c  0001265c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002694  08002694  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002694  08002694  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002694  08002694  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002694  08002694  00012694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002698  08002698  00012698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800269c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000a4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b0  200000b0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000089c8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013c4  00000000  00000000  00028a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000618  00000000  00000000  00029dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000578  00000000  00000000  0002a3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bbdb  00000000  00000000  0002a958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a622  00000000  00000000  00046533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6164  00000000  00000000  00050b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f6cb9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000016c4  00000000  00000000  000f6d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002644 	.word	0x08002644

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002644 	.word	0x08002644

080001d4 <MX_GPIO_Init>:
/* GPIO Application Include */
#include "gpio_app.h"

/* GPIO Init Function */
void MX_GPIO_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af00      	add	r7, sp, #0
	/* Enable GPIO Clock */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80001da:	4b2d      	ldr	r3, [pc, #180]	; (8000290 <MX_GPIO_Init+0xbc>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	4a2c      	ldr	r2, [pc, #176]	; (8000290 <MX_GPIO_Init+0xbc>)
 80001e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001e4:	6153      	str	r3, [r2, #20]
 80001e6:	4b2a      	ldr	r3, [pc, #168]	; (8000290 <MX_GPIO_Init+0xbc>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001ee:	60bb      	str	r3, [r7, #8]
 80001f0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80001f2:	4b27      	ldr	r3, [pc, #156]	; (8000290 <MX_GPIO_Init+0xbc>)
 80001f4:	695b      	ldr	r3, [r3, #20]
 80001f6:	4a26      	ldr	r2, [pc, #152]	; (8000290 <MX_GPIO_Init+0xbc>)
 80001f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80001fc:	6153      	str	r3, [r2, #20]
 80001fe:	4b24      	ldr	r3, [pc, #144]	; (8000290 <MX_GPIO_Init+0xbc>)
 8000200:	695b      	ldr	r3, [r3, #20]
 8000202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000206:	607b      	str	r3, [r7, #4]
 8000208:	687b      	ldr	r3, [r7, #4]

	/* GPIO Init Structure */
	GPIO_InitTypeDef	hgpio;

	/* Configure PB3 according with hgpio structure */
	hgpio.Pin	= GPIO_PIN_3;
 800020a:	2308      	movs	r3, #8
 800020c:	60fb      	str	r3, [r7, #12]
	hgpio.Mode	= GPIO_MODE_OUTPUT_PP;
 800020e:	2301      	movs	r3, #1
 8000210:	613b      	str	r3, [r7, #16]
	hgpio.Pull	= GPIO_NOPULL;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]
	hgpio.Speed	= GPIO_SPEED_FREQ_LOW;
 8000216:	2300      	movs	r3, #0
 8000218:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init( GPIOB, &hgpio );
 800021a:	f107 030c 	add.w	r3, r7, #12
 800021e:	4619      	mov	r1, r3
 8000220:	481c      	ldr	r0, [pc, #112]	; (8000294 <MX_GPIO_Init+0xc0>)
 8000222:	f000 fa2f 	bl	8000684 <HAL_GPIO_Init>

	/* Configure PA11 according with hgpio structure */
	hgpio.Pin	= GPIO_PIN_11;
 8000226:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800022a:	60fb      	str	r3, [r7, #12]
	hgpio.Mode	= GPIO_MODE_IT_FALLING;
 800022c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000230:	613b      	str	r3, [r7, #16]
	hgpio.Pull	= GPIO_NOPULL;
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]
	hgpio.Speed	= GPIO_SPEED_FREQ_LOW;
 8000236:	2300      	movs	r3, #0
 8000238:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init( GPIOA, &hgpio );
 800023a:	f107 030c 	add.w	r3, r7, #12
 800023e:	4619      	mov	r1, r3
 8000240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000244:	f000 fa1e 	bl	8000684 <HAL_GPIO_Init>

	/* Configure PB5 according with hgpio structure */
	hgpio.Pin	= GPIO_PIN_5;
 8000248:	2320      	movs	r3, #32
 800024a:	60fb      	str	r3, [r7, #12]
	hgpio.Mode	= GPIO_MODE_IT_FALLING;
 800024c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000250:	613b      	str	r3, [r7, #16]
	hgpio.Pull	= GPIO_NOPULL;
 8000252:	2300      	movs	r3, #0
 8000254:	617b      	str	r3, [r7, #20]
	hgpio.Speed	= GPIO_SPEED_FREQ_LOW;
 8000256:	2300      	movs	r3, #0
 8000258:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init( GPIOB, &hgpio );
 800025a:	f107 030c 	add.w	r3, r7, #12
 800025e:	4619      	mov	r1, r3
 8000260:	480c      	ldr	r0, [pc, #48]	; (8000294 <MX_GPIO_Init+0xc0>)
 8000262:	f000 fa0f 	bl	8000684 <HAL_GPIO_Init>

	/* Configure EXTI */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000266:	2200      	movs	r2, #0
 8000268:	2100      	movs	r1, #0
 800026a:	2028      	movs	r0, #40	; 0x28
 800026c:	f000 f9d3 	bl	8000616 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000270:	2028      	movs	r0, #40	; 0x28
 8000272:	f000 f9ec 	bl	800064e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0 );
 8000276:	2200      	movs	r2, #0
 8000278:	2100      	movs	r1, #0
 800027a:	2017      	movs	r0, #23
 800027c:	f000 f9cb 	bl	8000616 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000280:	2017      	movs	r0, #23
 8000282:	f000 f9e4 	bl	800064e <HAL_NVIC_EnableIRQ>
}
 8000286:	bf00      	nop
 8000288:	3720      	adds	r7, #32
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40021000 	.word	0x40021000
 8000294:	48000400 	.word	0x48000400

08000298 <AppSystemConfig>:

/*
 *
 */
void AppSystemConfig(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	/* Init HAL Driver*/
	HAL_Init();
 800029c:	f000 f87a 	bl	8000394 <HAL_Init>

	/* System Clock Configuration */
	SystemClock_Config();
 80002a0:	f000 f812 	bl	80002c8 <SystemClock_Config>

	/* MCU Peripheral Configuration */
	MX_GPIO_Init();
 80002a4:	f7ff ff96 	bl	80001d4 <MX_GPIO_Init>
	MX_UART2_Init();
 80002a8:	f000 f83c 	bl	8000324 <MX_UART2_Init>

}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <AppSystemDefault>:

/*
 *
 */
void AppSystemDefault(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0

	/* Set LD2 (PB3) low */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2108      	movs	r1, #8
 80002b8:	4802      	ldr	r0, [pc, #8]	; (80002c4 <AppSystemDefault+0x14>)
 80002ba:	f000 fb55 	bl	8000968 <HAL_GPIO_WritePin>
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	48000400 	.word	0x48000400

080002c8 <SystemClock_Config>:

/*
 * Local Functions
 */
static void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b090      	sub	sp, #64	; 0x40
 80002cc:	af00      	add	r7, sp, #0
	/* RCC Structure Configuration */
	RCC_OscInitTypeDef 	rcc_osc;
	RCC_ClkInitTypeDef	rcc_clk;

	/* Configure Osc Type */
	rcc_osc.OscillatorType		= RCC_OSCILLATORTYPE_HSI;
 80002ce:	2302      	movs	r3, #2
 80002d0:	61bb      	str	r3, [r7, #24]
	rcc_osc.HSIState			= RCC_HSI_ON;
 80002d2:	2301      	movs	r3, #1
 80002d4:	62bb      	str	r3, [r7, #40]	; 0x28
	rcc_osc.HSICalibrationValue	= RCC_HSICALIBRATION_DEFAULT;
 80002d6:	2310      	movs	r3, #16
 80002d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	rcc_osc.HSEState			= RCC_HSE_OFF;
 80002da:	2300      	movs	r3, #0
 80002dc:	61fb      	str	r3, [r7, #28]
	rcc_osc.LSEState			= RCC_LSE_OFF;
 80002de:	2300      	movs	r3, #0
 80002e0:	627b      	str	r3, [r7, #36]	; 0x24
	rcc_osc.PLL.PLLState		= RCC_PLL_ON;
 80002e2:	2302      	movs	r3, #2
 80002e4:	637b      	str	r3, [r7, #52]	; 0x34
	rcc_osc.PLL.PLLSource		= RCC_PLLSOURCE_HSI;
 80002e6:	2300      	movs	r3, #0
 80002e8:	63bb      	str	r3, [r7, #56]	; 0x38
	rcc_osc.PLL.PLLMUL			= RCC_PLL_MUL12;
 80002ea:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80002ee:	63fb      	str	r3, [r7, #60]	; 0x3c

	HAL_RCC_OscConfig(&rcc_osc);
 80002f0:	f107 0318 	add.w	r3, r7, #24
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 fb4f 	bl	8000998 <HAL_RCC_OscConfig>

	/* Configure System Clock */
	rcc_clk.SYSCLKSource	= RCC_SYSCLKSOURCE_PLLCLK;
 80002fa:	2302      	movs	r3, #2
 80002fc:	60bb      	str	r3, [r7, #8]
	rcc_clk.ClockType		= RCC_CLOCKTYPE_SYSCLK;		// 	48 MHz
 80002fe:	2301      	movs	r3, #1
 8000300:	607b      	str	r3, [r7, #4]
	rcc_clk.AHBCLKDivider	= RCC_SYSCLK_DIV1;			//	48 Mhz
 8000302:	2300      	movs	r3, #0
 8000304:	60fb      	str	r3, [r7, #12]
	rcc_clk.APB1CLKDivider	= RCC_HCLK_DIV2;			// 	48 Mhz / 2 = 24Mhz
 8000306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800030a:	613b      	str	r3, [r7, #16]
	rcc_clk.APB2CLKDivider	= RCC_HCLK_DIV1;			//	48 Mhz
 800030c:	2300      	movs	r3, #0
 800030e:	617b      	str	r3, [r7, #20]

	HAL_RCC_ClockConfig(&rcc_clk, FLASH_LATENCY_0);
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f001 fb7d 	bl	8001a14 <HAL_RCC_ClockConfig>

}
 800031a:	bf00      	nop
 800031c:	3740      	adds	r7, #64	; 0x40
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <MX_UART2_Init>:

/* UART2 Structure */
UART_HandleTypeDef	huart2;

void MX_UART2_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0

	/* Enable USART2 Clk */
	__HAL_RCC_USART2_CLK_ENABLE();
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <MX_UART2_Init+0x64>)
 800032c:	69db      	ldr	r3, [r3, #28]
 800032e:	4a16      	ldr	r2, [pc, #88]	; (8000388 <MX_UART2_Init+0x64>)
 8000330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000334:	61d3      	str	r3, [r2, #28]
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <MX_UART2_Init+0x64>)
 8000338:	69db      	ldr	r3, [r3, #28]
 800033a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]

	/* Configure UART2 */
	huart2.Instance				= USART2;
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <MX_UART2_Init+0x68>)
 8000344:	4a12      	ldr	r2, [pc, #72]	; (8000390 <MX_UART2_Init+0x6c>)
 8000346:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate		= BAUDRATE;
 8000348:	4b10      	ldr	r3, [pc, #64]	; (800038c <MX_UART2_Init+0x68>)
 800034a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800034e:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength		= UART_WORDLENGTH_8B;
 8000350:	4b0e      	ldr	r3, [pc, #56]	; (800038c <MX_UART2_Init+0x68>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits		= UART_STOPBITS_1;
 8000356:	4b0d      	ldr	r3, [pc, #52]	; (800038c <MX_UART2_Init+0x68>)
 8000358:	2200      	movs	r2, #0
 800035a:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity			= UART_PARITY_NONE;
 800035c:	4b0b      	ldr	r3, [pc, #44]	; (800038c <MX_UART2_Init+0x68>)
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode			= UART_MODE_TX_RX;
 8000362:	4b0a      	ldr	r3, [pc, #40]	; (800038c <MX_UART2_Init+0x68>)
 8000364:	220c      	movs	r2, #12
 8000366:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl		= UART_HWCONTROL_NONE;
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <MX_UART2_Init+0x68>)
 800036a:	2200      	movs	r2, #0
 800036c:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling	= UART_OVERSAMPLING_16;
 800036e:	4b07      	ldr	r3, [pc, #28]	; (800038c <MX_UART2_Init+0x68>)
 8000370:	2200      	movs	r2, #0
 8000372:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling	= UART_ONE_BIT_SAMPLE_DISABLE;
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <MX_UART2_Init+0x68>)
 8000376:	2200      	movs	r2, #0
 8000378:	621a      	str	r2, [r3, #32]

	/* Init UART2 according with huart2 structure */
	HAL_UART_Init(&huart2);
 800037a:	4804      	ldr	r0, [pc, #16]	; (800038c <MX_UART2_Init+0x68>)
 800037c:	f001 fd80 	bl	8001e80 <HAL_UART_Init>

}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40021000 	.word	0x40021000
 800038c:	20000028 	.word	0x20000028
 8000390:	40004400 	.word	0x40004400

08000394 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <HAL_Init+0x28>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a07      	ldr	r2, [pc, #28]	; (80003bc <HAL_Init+0x28>)
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003a4:	2003      	movs	r0, #3
 80003a6:	f000 f92b 	bl	8000600 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003aa:	200f      	movs	r0, #15
 80003ac:	f000 f808 	bl	80003c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003b0:	f002 f8a0 	bl	80024f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003b4:	2300      	movs	r3, #0
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40022000 	.word	0x40022000

080003c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <HAL_InitTick+0x54>)
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	4b12      	ldr	r3, [pc, #72]	; (8000418 <HAL_InitTick+0x58>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	4619      	mov	r1, r3
 80003d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80003da:	fbb2 f3f3 	udiv	r3, r2, r3
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 f943 	bl	800066a <HAL_SYSTICK_Config>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003ea:	2301      	movs	r3, #1
 80003ec:	e00e      	b.n	800040c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2b0f      	cmp	r3, #15
 80003f2:	d80a      	bhi.n	800040a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003f4:	2200      	movs	r2, #0
 80003f6:	6879      	ldr	r1, [r7, #4]
 80003f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003fc:	f000 f90b 	bl	8000616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000400:	4a06      	ldr	r2, [pc, #24]	; (800041c <HAL_InitTick+0x5c>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000406:	2300      	movs	r3, #0
 8000408:	e000      	b.n	800040c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800040a:	2301      	movs	r3, #1
}
 800040c:	4618      	mov	r0, r3
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000008 	.word	0x20000008
 8000418:	20000004 	.word	0x20000004
 800041c:	20000000 	.word	0x20000000

08000420 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <HAL_IncTick+0x20>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	461a      	mov	r2, r3
 800042a:	4b06      	ldr	r3, [pc, #24]	; (8000444 <HAL_IncTick+0x24>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4413      	add	r3, r2
 8000430:	4a04      	ldr	r2, [pc, #16]	; (8000444 <HAL_IncTick+0x24>)
 8000432:	6013      	str	r3, [r2, #0]
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	20000004 	.word	0x20000004
 8000444:	200000ac 	.word	0x200000ac

08000448 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  return uwTick;  
 800044c:	4b03      	ldr	r3, [pc, #12]	; (800045c <HAL_GetTick+0x14>)
 800044e:	681b      	ldr	r3, [r3, #0]
}
 8000450:	4618      	mov	r0, r3
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	200000ac 	.word	0x200000ac

08000460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f003 0307 	and.w	r3, r3, #7
 800046e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000476:	68ba      	ldr	r2, [r7, #8]
 8000478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800047c:	4013      	ands	r3, r2
 800047e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800048c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000492:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	60d3      	str	r3, [r2, #12]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	e000ed00 	.word	0xe000ed00

080004a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <__NVIC_GetPriorityGrouping+0x18>)
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	0a1b      	lsrs	r3, r3, #8
 80004b2:	f003 0307 	and.w	r3, r3, #7
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	e000ed00 	.word	0xe000ed00

080004c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	db0b      	blt.n	80004ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	f003 021f 	and.w	r2, r3, #31
 80004dc:	4907      	ldr	r1, [pc, #28]	; (80004fc <__NVIC_EnableIRQ+0x38>)
 80004de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e2:	095b      	lsrs	r3, r3, #5
 80004e4:	2001      	movs	r0, #1
 80004e6:	fa00 f202 	lsl.w	r2, r0, r2
 80004ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	e000e100 	.word	0xe000e100

08000500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	6039      	str	r1, [r7, #0]
 800050a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800050c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000510:	2b00      	cmp	r3, #0
 8000512:	db0a      	blt.n	800052a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	b2da      	uxtb	r2, r3
 8000518:	490c      	ldr	r1, [pc, #48]	; (800054c <__NVIC_SetPriority+0x4c>)
 800051a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051e:	0112      	lsls	r2, r2, #4
 8000520:	b2d2      	uxtb	r2, r2
 8000522:	440b      	add	r3, r1
 8000524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000528:	e00a      	b.n	8000540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	b2da      	uxtb	r2, r3
 800052e:	4908      	ldr	r1, [pc, #32]	; (8000550 <__NVIC_SetPriority+0x50>)
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	f003 030f 	and.w	r3, r3, #15
 8000536:	3b04      	subs	r3, #4
 8000538:	0112      	lsls	r2, r2, #4
 800053a:	b2d2      	uxtb	r2, r2
 800053c:	440b      	add	r3, r1
 800053e:	761a      	strb	r2, [r3, #24]
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	e000e100 	.word	0xe000e100
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000554:	b480      	push	{r7}
 8000556:	b089      	sub	sp, #36	; 0x24
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f003 0307 	and.w	r3, r3, #7
 8000566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000568:	69fb      	ldr	r3, [r7, #28]
 800056a:	f1c3 0307 	rsb	r3, r3, #7
 800056e:	2b04      	cmp	r3, #4
 8000570:	bf28      	it	cs
 8000572:	2304      	movcs	r3, #4
 8000574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000576:	69fb      	ldr	r3, [r7, #28]
 8000578:	3304      	adds	r3, #4
 800057a:	2b06      	cmp	r3, #6
 800057c:	d902      	bls.n	8000584 <NVIC_EncodePriority+0x30>
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	3b03      	subs	r3, #3
 8000582:	e000      	b.n	8000586 <NVIC_EncodePriority+0x32>
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800058c:	69bb      	ldr	r3, [r7, #24]
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	43da      	mvns	r2, r3
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	401a      	ands	r2, r3
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800059c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	fa01 f303 	lsl.w	r3, r1, r3
 80005a6:	43d9      	mvns	r1, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	4313      	orrs	r3, r2
         );
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3724      	adds	r7, #36	; 0x24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
	...

080005bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3b01      	subs	r3, #1
 80005c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005cc:	d301      	bcc.n	80005d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ce:	2301      	movs	r3, #1
 80005d0:	e00f      	b.n	80005f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005d2:	4a0a      	ldr	r2, [pc, #40]	; (80005fc <SysTick_Config+0x40>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005da:	210f      	movs	r1, #15
 80005dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005e0:	f7ff ff8e 	bl	8000500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <SysTick_Config+0x40>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ea:	4b04      	ldr	r3, [pc, #16]	; (80005fc <SysTick_Config+0x40>)
 80005ec:	2207      	movs	r2, #7
 80005ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	e000e010 	.word	0xe000e010

08000600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff ff29 	bl	8000460 <__NVIC_SetPriorityGrouping>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b086      	sub	sp, #24
 800061a:	af00      	add	r7, sp, #0
 800061c:	4603      	mov	r3, r0
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	607a      	str	r2, [r7, #4]
 8000622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000628:	f7ff ff3e 	bl	80004a8 <__NVIC_GetPriorityGrouping>
 800062c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	68b9      	ldr	r1, [r7, #8]
 8000632:	6978      	ldr	r0, [r7, #20]
 8000634:	f7ff ff8e 	bl	8000554 <NVIC_EncodePriority>
 8000638:	4602      	mov	r2, r0
 800063a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800063e:	4611      	mov	r1, r2
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff5d 	bl	8000500 <__NVIC_SetPriority>
}
 8000646:	bf00      	nop
 8000648:	3718      	adds	r7, #24
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
 8000654:	4603      	mov	r3, r0
 8000656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff31 	bl	80004c4 <__NVIC_EnableIRQ>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f7ff ffa2 	bl	80005bc <SysTick_Config>
 8000678:	4603      	mov	r3, r0
}
 800067a:	4618      	mov	r0, r3
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000684:	b480      	push	{r7}
 8000686:	b087      	sub	sp, #28
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000692:	e14e      	b.n	8000932 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	fa01 f303 	lsl.w	r3, r1, r3
 80006a0:	4013      	ands	r3, r2
 80006a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	f000 8140 	beq.w	800092c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	f003 0303 	and.w	r3, r3, #3
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d005      	beq.n	80006c4 <HAL_GPIO_Init+0x40>
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	f003 0303 	and.w	r3, r3, #3
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	d130      	bne.n	8000726 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	2203      	movs	r2, #3
 80006d0:	fa02 f303 	lsl.w	r3, r2, r3
 80006d4:	43db      	mvns	r3, r3
 80006d6:	693a      	ldr	r2, [r7, #16]
 80006d8:	4013      	ands	r3, r2
 80006da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	68da      	ldr	r2, [r3, #12]
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	fa02 f303 	lsl.w	r3, r2, r3
 80006e8:	693a      	ldr	r2, [r7, #16]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	693a      	ldr	r2, [r7, #16]
 80006f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006fa:	2201      	movs	r2, #1
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	43db      	mvns	r3, r3
 8000704:	693a      	ldr	r2, [r7, #16]
 8000706:	4013      	ands	r3, r2
 8000708:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	091b      	lsrs	r3, r3, #4
 8000710:	f003 0201 	and.w	r2, r3, #1
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	4313      	orrs	r3, r2
 800071e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	f003 0303 	and.w	r3, r3, #3
 800072e:	2b03      	cmp	r3, #3
 8000730:	d017      	beq.n	8000762 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	2203      	movs	r2, #3
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	43db      	mvns	r3, r3
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	4013      	ands	r3, r2
 8000748:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	689a      	ldr	r2, [r3, #8]
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	4313      	orrs	r3, r2
 800075a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	f003 0303 	and.w	r3, r3, #3
 800076a:	2b02      	cmp	r3, #2
 800076c:	d123      	bne.n	80007b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	08da      	lsrs	r2, r3, #3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	3208      	adds	r2, #8
 8000776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800077a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	220f      	movs	r2, #15
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43db      	mvns	r3, r3
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	4013      	ands	r3, r2
 8000790:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	691a      	ldr	r2, [r3, #16]
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	693a      	ldr	r2, [r7, #16]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	08da      	lsrs	r2, r3, #3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3208      	adds	r2, #8
 80007b0:	6939      	ldr	r1, [r7, #16]
 80007b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	2203      	movs	r2, #3
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	4013      	ands	r3, r2
 80007cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	f003 0203 	and.w	r2, r3, #3
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	693a      	ldr	r2, [r7, #16]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	693a      	ldr	r2, [r7, #16]
 80007e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f000 809a 	beq.w	800092c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f8:	4b55      	ldr	r3, [pc, #340]	; (8000950 <HAL_GPIO_Init+0x2cc>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a54      	ldr	r2, [pc, #336]	; (8000950 <HAL_GPIO_Init+0x2cc>)
 80007fe:	f043 0301 	orr.w	r3, r3, #1
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b52      	ldr	r3, [pc, #328]	; (8000950 <HAL_GPIO_Init+0x2cc>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000810:	4a50      	ldr	r2, [pc, #320]	; (8000954 <HAL_GPIO_Init+0x2d0>)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	089b      	lsrs	r3, r3, #2
 8000816:	3302      	adds	r3, #2
 8000818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800081c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	f003 0303 	and.w	r3, r3, #3
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	220f      	movs	r2, #15
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	43db      	mvns	r3, r3
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	4013      	ands	r3, r2
 8000832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800083a:	d013      	beq.n	8000864 <HAL_GPIO_Init+0x1e0>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a46      	ldr	r2, [pc, #280]	; (8000958 <HAL_GPIO_Init+0x2d4>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d00d      	beq.n	8000860 <HAL_GPIO_Init+0x1dc>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a45      	ldr	r2, [pc, #276]	; (800095c <HAL_GPIO_Init+0x2d8>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d007      	beq.n	800085c <HAL_GPIO_Init+0x1d8>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a44      	ldr	r2, [pc, #272]	; (8000960 <HAL_GPIO_Init+0x2dc>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d101      	bne.n	8000858 <HAL_GPIO_Init+0x1d4>
 8000854:	2303      	movs	r3, #3
 8000856:	e006      	b.n	8000866 <HAL_GPIO_Init+0x1e2>
 8000858:	2305      	movs	r3, #5
 800085a:	e004      	b.n	8000866 <HAL_GPIO_Init+0x1e2>
 800085c:	2302      	movs	r3, #2
 800085e:	e002      	b.n	8000866 <HAL_GPIO_Init+0x1e2>
 8000860:	2301      	movs	r3, #1
 8000862:	e000      	b.n	8000866 <HAL_GPIO_Init+0x1e2>
 8000864:	2300      	movs	r3, #0
 8000866:	697a      	ldr	r2, [r7, #20]
 8000868:	f002 0203 	and.w	r2, r2, #3
 800086c:	0092      	lsls	r2, r2, #2
 800086e:	4093      	lsls	r3, r2
 8000870:	693a      	ldr	r2, [r7, #16]
 8000872:	4313      	orrs	r3, r2
 8000874:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000876:	4937      	ldr	r1, [pc, #220]	; (8000954 <HAL_GPIO_Init+0x2d0>)
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	089b      	lsrs	r3, r3, #2
 800087c:	3302      	adds	r3, #2
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000884:	4b37      	ldr	r3, [pc, #220]	; (8000964 <HAL_GPIO_Init+0x2e0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	43db      	mvns	r3, r3
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	4013      	ands	r3, r2
 8000892:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800089c:	2b00      	cmp	r3, #0
 800089e:	d003      	beq.n	80008a8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80008a8:	4a2e      	ldr	r2, [pc, #184]	; (8000964 <HAL_GPIO_Init+0x2e0>)
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <HAL_GPIO_Init+0x2e0>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	43db      	mvns	r3, r3
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	4013      	ands	r3, r2
 80008bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d003      	beq.n	80008d2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80008d2:	4a24      	ldr	r2, [pc, #144]	; (8000964 <HAL_GPIO_Init+0x2e0>)
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <HAL_GPIO_Init+0x2e0>)
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	43db      	mvns	r3, r3
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4013      	ands	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d003      	beq.n	80008fc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80008fc:	4a19      	ldr	r2, [pc, #100]	; (8000964 <HAL_GPIO_Init+0x2e0>)
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <HAL_GPIO_Init+0x2e0>)
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	43db      	mvns	r3, r3
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	4013      	ands	r3, r2
 8000910:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800091a:	2b00      	cmp	r3, #0
 800091c:	d003      	beq.n	8000926 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4313      	orrs	r3, r2
 8000924:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000926:	4a0f      	ldr	r2, [pc, #60]	; (8000964 <HAL_GPIO_Init+0x2e0>)
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	3301      	adds	r3, #1
 8000930:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	fa22 f303 	lsr.w	r3, r2, r3
 800093c:	2b00      	cmp	r3, #0
 800093e:	f47f aea9 	bne.w	8000694 <HAL_GPIO_Init+0x10>
  }
}
 8000942:	bf00      	nop
 8000944:	bf00      	nop
 8000946:	371c      	adds	r7, #28
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	40021000 	.word	0x40021000
 8000954:	40010000 	.word	0x40010000
 8000958:	48000400 	.word	0x48000400
 800095c:	48000800 	.word	0x48000800
 8000960:	48000c00 	.word	0x48000c00
 8000964:	40010400 	.word	0x40010400

08000968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	807b      	strh	r3, [r7, #2]
 8000974:	4613      	mov	r3, r2
 8000976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000978:	787b      	ldrb	r3, [r7, #1]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d003      	beq.n	8000986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800097e:	887a      	ldrh	r2, [r7, #2]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000984:	e002      	b.n	800098c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000986:	887a      	ldrh	r2, [r7, #2]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800099e:	af00      	add	r7, sp, #0
 80009a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80009a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80009a8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80009aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80009ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d102      	bne.n	80009be <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80009b8:	2301      	movs	r3, #1
 80009ba:	f001 b823 	b.w	8001a04 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80009c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f000 817d 	beq.w	8000cce <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80009d4:	4bbc      	ldr	r3, [pc, #752]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f003 030c 	and.w	r3, r3, #12
 80009dc:	2b04      	cmp	r3, #4
 80009de:	d00c      	beq.n	80009fa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009e0:	4bb9      	ldr	r3, [pc, #740]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f003 030c 	and.w	r3, r3, #12
 80009e8:	2b08      	cmp	r3, #8
 80009ea:	d15c      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x10e>
 80009ec:	4bb6      	ldr	r3, [pc, #728]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009f8:	d155      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x10e>
 80009fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009fe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a02:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000a06:	fa93 f3a3 	rbit	r3, r3
 8000a0a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a0e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a12:	fab3 f383 	clz	r3, r3
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	095b      	lsrs	r3, r3, #5
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d102      	bne.n	8000a2c <HAL_RCC_OscConfig+0x94>
 8000a26:	4ba8      	ldr	r3, [pc, #672]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	e015      	b.n	8000a58 <HAL_RCC_OscConfig+0xc0>
 8000a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a30:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a34:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000a38:	fa93 f3a3 	rbit	r3, r3
 8000a3c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a44:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000a48:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000a4c:	fa93 f3a3 	rbit	r3, r3
 8000a50:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000a54:	4b9c      	ldr	r3, [pc, #624]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a5c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000a60:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000a64:	fa92 f2a2 	rbit	r2, r2
 8000a68:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000a6c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	f042 0220 	orr.w	r2, r2, #32
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	f002 021f 	and.w	r2, r2, #31
 8000a80:	2101      	movs	r1, #1
 8000a82:	fa01 f202 	lsl.w	r2, r1, r2
 8000a86:	4013      	ands	r3, r2
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	f000 811f 	beq.w	8000ccc <HAL_RCC_OscConfig+0x334>
 8000a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000a92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f040 8116 	bne.w	8000ccc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	f000 bfaf 	b.w	8001a04 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000aaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ab6:	d106      	bne.n	8000ac6 <HAL_RCC_OscConfig+0x12e>
 8000ab8:	4b83      	ldr	r3, [pc, #524]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a82      	ldr	r2, [pc, #520]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	e036      	b.n	8000b34 <HAL_RCC_OscConfig+0x19c>
 8000ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000aca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d10c      	bne.n	8000af0 <HAL_RCC_OscConfig+0x158>
 8000ad6:	4b7c      	ldr	r3, [pc, #496]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a7b      	ldr	r2, [pc, #492]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ae0:	6013      	str	r3, [r2, #0]
 8000ae2:	4b79      	ldr	r3, [pc, #484]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a78      	ldr	r2, [pc, #480]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	e021      	b.n	8000b34 <HAL_RCC_OscConfig+0x19c>
 8000af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000af4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b00:	d10c      	bne.n	8000b1c <HAL_RCC_OscConfig+0x184>
 8000b02:	4b71      	ldr	r3, [pc, #452]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a70      	ldr	r2, [pc, #448]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	4b6e      	ldr	r3, [pc, #440]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a6d      	ldr	r2, [pc, #436]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b18:	6013      	str	r3, [r2, #0]
 8000b1a:	e00b      	b.n	8000b34 <HAL_RCC_OscConfig+0x19c>
 8000b1c:	4b6a      	ldr	r3, [pc, #424]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a69      	ldr	r2, [pc, #420]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b26:	6013      	str	r3, [r2, #0]
 8000b28:	4b67      	ldr	r3, [pc, #412]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a66      	ldr	r2, [pc, #408]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b32:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b34:	4b64      	ldr	r3, [pc, #400]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b38:	f023 020f 	bic.w	r2, r3, #15
 8000b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	495f      	ldr	r1, [pc, #380]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000b52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d059      	beq.n	8000c12 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b5e:	f7ff fc73 	bl	8000448 <HAL_GetTick>
 8000b62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b66:	e00a      	b.n	8000b7e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b68:	f7ff fc6e 	bl	8000448 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	2b64      	cmp	r3, #100	; 0x64
 8000b76:	d902      	bls.n	8000b7e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	f000 bf43 	b.w	8001a04 <HAL_RCC_OscConfig+0x106c>
 8000b7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b82:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b86:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000b8a:	fa93 f3a3 	rbit	r3, r3
 8000b8e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000b92:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b96:	fab3 f383 	clz	r3, r3
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	095b      	lsrs	r3, r3, #5
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d102      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x218>
 8000baa:	4b47      	ldr	r3, [pc, #284]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	e015      	b.n	8000bdc <HAL_RCC_OscConfig+0x244>
 8000bb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bb4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bb8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000bbc:	fa93 f3a3 	rbit	r3, r3
 8000bc0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000bc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bc8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000bcc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000bd0:	fa93 f3a3 	rbit	r3, r3
 8000bd4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000bd8:	4b3b      	ldr	r3, [pc, #236]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bdc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000be0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000be4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000be8:	fa92 f2a2 	rbit	r2, r2
 8000bec:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000bf0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000bf4:	fab2 f282 	clz	r2, r2
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	f042 0220 	orr.w	r2, r2, #32
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	f002 021f 	and.w	r2, r2, #31
 8000c04:	2101      	movs	r1, #1
 8000c06:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d0ab      	beq.n	8000b68 <HAL_RCC_OscConfig+0x1d0>
 8000c10:	e05d      	b.n	8000cce <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c12:	f7ff fc19 	bl	8000448 <HAL_GetTick>
 8000c16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c1a:	e00a      	b.n	8000c32 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c1c:	f7ff fc14 	bl	8000448 <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	2b64      	cmp	r3, #100	; 0x64
 8000c2a:	d902      	bls.n	8000c32 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	f000 bee9 	b.w	8001a04 <HAL_RCC_OscConfig+0x106c>
 8000c32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c36:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c3a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000c3e:	fa93 f3a3 	rbit	r3, r3
 8000c42:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000c46:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c4a:	fab3 f383 	clz	r3, r3
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	095b      	lsrs	r3, r3, #5
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d102      	bne.n	8000c64 <HAL_RCC_OscConfig+0x2cc>
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	e015      	b.n	8000c90 <HAL_RCC_OscConfig+0x2f8>
 8000c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c68:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c6c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000c70:	fa93 f3a3 	rbit	r3, r3
 8000c74:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000c78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c7c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000c80:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000c84:	fa93 f3a3 	rbit	r3, r3
 8000c88:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_RCC_OscConfig+0x330>)
 8000c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c94:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000c98:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000c9c:	fa92 f2a2 	rbit	r2, r2
 8000ca0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000ca4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	f042 0220 	orr.w	r2, r2, #32
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	f002 021f 	and.w	r2, r2, #31
 8000cb8:	2101      	movs	r1, #1
 8000cba:	fa01 f202 	lsl.w	r2, r1, r2
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1ab      	bne.n	8000c1c <HAL_RCC_OscConfig+0x284>
 8000cc4:	e003      	b.n	8000cce <HAL_RCC_OscConfig+0x336>
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 817d 	beq.w	8000fde <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ce4:	4ba6      	ldr	r3, [pc, #664]	; (8000f80 <HAL_RCC_OscConfig+0x5e8>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 030c 	and.w	r3, r3, #12
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d00b      	beq.n	8000d08 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000cf0:	4ba3      	ldr	r3, [pc, #652]	; (8000f80 <HAL_RCC_OscConfig+0x5e8>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 030c 	and.w	r3, r3, #12
 8000cf8:	2b08      	cmp	r3, #8
 8000cfa:	d172      	bne.n	8000de2 <HAL_RCC_OscConfig+0x44a>
 8000cfc:	4ba0      	ldr	r3, [pc, #640]	; (8000f80 <HAL_RCC_OscConfig+0x5e8>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d16c      	bne.n	8000de2 <HAL_RCC_OscConfig+0x44a>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000d12:	fa93 f3a3 	rbit	r3, r3
 8000d16:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000d1a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1e:	fab3 f383 	clz	r3, r3
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	095b      	lsrs	r3, r3, #5
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d102      	bne.n	8000d38 <HAL_RCC_OscConfig+0x3a0>
 8000d32:	4b93      	ldr	r3, [pc, #588]	; (8000f80 <HAL_RCC_OscConfig+0x5e8>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	e013      	b.n	8000d60 <HAL_RCC_OscConfig+0x3c8>
 8000d38:	2302      	movs	r3, #2
 8000d3a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d3e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000d42:	fa93 f3a3 	rbit	r3, r3
 8000d46:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000d50:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000d54:	fa93 f3a3 	rbit	r3, r3
 8000d58:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000d5c:	4b88      	ldr	r3, [pc, #544]	; (8000f80 <HAL_RCC_OscConfig+0x5e8>)
 8000d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d60:	2202      	movs	r2, #2
 8000d62:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000d66:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000d6a:	fa92 f2a2 	rbit	r2, r2
 8000d6e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000d72:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	f042 0220 	orr.w	r2, r2, #32
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	f002 021f 	and.w	r2, r2, #31
 8000d86:	2101      	movs	r1, #1
 8000d88:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d00a      	beq.n	8000da8 <HAL_RCC_OscConfig+0x410>
 8000d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	691b      	ldr	r3, [r3, #16]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d002      	beq.n	8000da8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	f000 be2e 	b.w	8001a04 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da8:	4b75      	ldr	r3, [pc, #468]	; (8000f80 <HAL_RCC_OscConfig+0x5e8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000db4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	21f8      	movs	r1, #248	; 0xf8
 8000dbe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000dc6:	fa91 f1a1 	rbit	r1, r1
 8000dca:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000dce:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000dd2:	fab1 f181 	clz	r1, r1
 8000dd6:	b2c9      	uxtb	r1, r1
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	4969      	ldr	r1, [pc, #420]	; (8000f80 <HAL_RCC_OscConfig+0x5e8>)
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000de0:	e0fd      	b.n	8000fde <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000de6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 8088 	beq.w	8000f04 <HAL_RCC_OscConfig+0x56c>
 8000df4:	2301      	movs	r3, #1
 8000df6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000dfe:	fa93 f3a3 	rbit	r3, r3
 8000e02:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000e06:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e0a:	fab3 f383 	clz	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e20:	f7ff fb12 	bl	8000448 <HAL_GetTick>
 8000e24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e28:	e00a      	b.n	8000e40 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e2a:	f7ff fb0d 	bl	8000448 <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d902      	bls.n	8000e40 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	f000 bde2 	b.w	8001a04 <HAL_RCC_OscConfig+0x106c>
 8000e40:	2302      	movs	r3, #2
 8000e42:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e46:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000e4a:	fa93 f3a3 	rbit	r3, r3
 8000e4e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000e52:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e56:	fab3 f383 	clz	r3, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	095b      	lsrs	r3, r3, #5
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d102      	bne.n	8000e70 <HAL_RCC_OscConfig+0x4d8>
 8000e6a:	4b45      	ldr	r3, [pc, #276]	; (8000f80 <HAL_RCC_OscConfig+0x5e8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	e013      	b.n	8000e98 <HAL_RCC_OscConfig+0x500>
 8000e70:	2302      	movs	r3, #2
 8000e72:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e76:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000e7a:	fa93 f3a3 	rbit	r3, r3
 8000e7e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000e82:	2302      	movs	r3, #2
 8000e84:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000e88:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000e8c:	fa93 f3a3 	rbit	r3, r3
 8000e90:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000e94:	4b3a      	ldr	r3, [pc, #232]	; (8000f80 <HAL_RCC_OscConfig+0x5e8>)
 8000e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e98:	2202      	movs	r2, #2
 8000e9a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000e9e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000ea2:	fa92 f2a2 	rbit	r2, r2
 8000ea6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8000eaa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	f042 0220 	orr.w	r2, r2, #32
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	f002 021f 	and.w	r2, r2, #31
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0af      	beq.n	8000e2a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eca:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <HAL_RCC_OscConfig+0x5e8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	21f8      	movs	r1, #248	; 0xf8
 8000ee0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000ee8:	fa91 f1a1 	rbit	r1, r1
 8000eec:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8000ef0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8000ef4:	fab1 f181 	clz	r1, r1
 8000ef8:	b2c9      	uxtb	r1, r1
 8000efa:	408b      	lsls	r3, r1
 8000efc:	4920      	ldr	r1, [pc, #128]	; (8000f80 <HAL_RCC_OscConfig+0x5e8>)
 8000efe:	4313      	orrs	r3, r2
 8000f00:	600b      	str	r3, [r1, #0]
 8000f02:	e06c      	b.n	8000fde <HAL_RCC_OscConfig+0x646>
 8000f04:	2301      	movs	r3, #1
 8000f06:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000f0e:	fa93 f3a3 	rbit	r3, r3
 8000f12:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8000f16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f1a:	fab3 f383 	clz	r3, r3
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f30:	f7ff fa8a 	bl	8000448 <HAL_GetTick>
 8000f34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f38:	e00a      	b.n	8000f50 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f3a:	f7ff fa85 	bl	8000448 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d902      	bls.n	8000f50 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	f000 bd5a 	b.w	8001a04 <HAL_RCC_OscConfig+0x106c>
 8000f50:	2302      	movs	r3, #2
 8000f52:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000f5a:	fa93 f3a3 	rbit	r3, r3
 8000f5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8000f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f66:	fab3 f383 	clz	r3, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	095b      	lsrs	r3, r3, #5
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d104      	bne.n	8000f84 <HAL_RCC_OscConfig+0x5ec>
 8000f7a:	4b01      	ldr	r3, [pc, #4]	; (8000f80 <HAL_RCC_OscConfig+0x5e8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	e015      	b.n	8000fac <HAL_RCC_OscConfig+0x614>
 8000f80:	40021000 	.word	0x40021000
 8000f84:	2302      	movs	r3, #2
 8000f86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000f8e:	fa93 f3a3 	rbit	r3, r3
 8000f92:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000f96:	2302      	movs	r3, #2
 8000f98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000f9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000fa0:	fa93 f3a3 	rbit	r3, r3
 8000fa4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000fa8:	4bc8      	ldr	r3, [pc, #800]	; (80012cc <HAL_RCC_OscConfig+0x934>)
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	2202      	movs	r2, #2
 8000fae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8000fb2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000fb6:	fa92 f2a2 	rbit	r2, r2
 8000fba:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8000fbe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000fc2:	fab2 f282 	clz	r2, r2
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	f042 0220 	orr.w	r2, r2, #32
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	f002 021f 	and.w	r2, r2, #31
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd8:	4013      	ands	r3, r2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1ad      	bne.n	8000f3a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0308 	and.w	r3, r3, #8
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 8110 	beq.w	8001214 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ff8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d079      	beq.n	80010f8 <HAL_RCC_OscConfig+0x760>
 8001004:	2301      	movs	r3, #1
 8001006:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800100e:	fa93 f3a3 	rbit	r3, r3
 8001012:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800101a:	fab3 f383 	clz	r3, r3
 800101e:	b2db      	uxtb	r3, r3
 8001020:	461a      	mov	r2, r3
 8001022:	4bab      	ldr	r3, [pc, #684]	; (80012d0 <HAL_RCC_OscConfig+0x938>)
 8001024:	4413      	add	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	461a      	mov	r2, r3
 800102a:	2301      	movs	r3, #1
 800102c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800102e:	f7ff fa0b 	bl	8000448 <HAL_GetTick>
 8001032:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001036:	e00a      	b.n	800104e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001038:	f7ff fa06 	bl	8000448 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d902      	bls.n	800104e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	f000 bcdb 	b.w	8001a04 <HAL_RCC_OscConfig+0x106c>
 800104e:	2302      	movs	r3, #2
 8001050:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001054:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001058:	fa93 f3a3 	rbit	r3, r3
 800105c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001064:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001068:	2202      	movs	r2, #2
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001070:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	fa93 f2a3 	rbit	r2, r3
 800107a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800107e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800108c:	2202      	movs	r2, #2
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	fa93 f2a3 	rbit	r2, r3
 800109e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a8:	4b88      	ldr	r3, [pc, #544]	; (80012cc <HAL_RCC_OscConfig+0x934>)
 80010aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80010b4:	2102      	movs	r1, #2
 80010b6:	6019      	str	r1, [r3, #0]
 80010b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	fa93 f1a3 	rbit	r1, r3
 80010c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80010ce:	6019      	str	r1, [r3, #0]
  return result;
 80010d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	fab3 f383 	clz	r3, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	f003 031f 	and.w	r3, r3, #31
 80010ea:	2101      	movs	r1, #1
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0a0      	beq.n	8001038 <HAL_RCC_OscConfig+0x6a0>
 80010f6:	e08d      	b.n	8001214 <HAL_RCC_OscConfig+0x87c>
 80010f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001108:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	fa93 f2a3 	rbit	r2, r3
 8001112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001116:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800111a:	601a      	str	r2, [r3, #0]
  return result;
 800111c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001120:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001124:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001126:	fab3 f383 	clz	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	4b68      	ldr	r3, [pc, #416]	; (80012d0 <HAL_RCC_OscConfig+0x938>)
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	461a      	mov	r2, r3
 8001136:	2300      	movs	r3, #0
 8001138:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113a:	f7ff f985 	bl	8000448 <HAL_GetTick>
 800113e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001142:	e00a      	b.n	800115a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001144:	f7ff f980 	bl	8000448 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d902      	bls.n	800115a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	f000 bc55 	b.w	8001a04 <HAL_RCC_OscConfig+0x106c>
 800115a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001162:	2202      	movs	r2, #2
 8001164:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800116a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	fa93 f2a3 	rbit	r2, r3
 8001174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001178:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001182:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001186:	2202      	movs	r2, #2
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800118e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	fa93 f2a3 	rbit	r2, r3
 8001198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800119c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80011aa:	2202      	movs	r2, #2
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	fa93 f2a3 	rbit	r2, r3
 80011bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80011c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c6:	4b41      	ldr	r3, [pc, #260]	; (80012cc <HAL_RCC_OscConfig+0x934>)
 80011c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80011d2:	2102      	movs	r1, #2
 80011d4:	6019      	str	r1, [r3, #0]
 80011d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	fa93 f1a3 	rbit	r1, r3
 80011e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80011ec:	6019      	str	r1, [r3, #0]
  return result;
 80011ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011f2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	fab3 f383 	clz	r3, r3
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f003 031f 	and.w	r3, r3, #31
 8001208:	2101      	movs	r1, #1
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	4013      	ands	r3, r2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d197      	bne.n	8001144 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001218:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 81a1 	beq.w	800156c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800122a:	2300      	movs	r3, #0
 800122c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001230:	4b26      	ldr	r3, [pc, #152]	; (80012cc <HAL_RCC_OscConfig+0x934>)
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d116      	bne.n	800126a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_RCC_OscConfig+0x934>)
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	4a22      	ldr	r2, [pc, #136]	; (80012cc <HAL_RCC_OscConfig+0x934>)
 8001242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001246:	61d3      	str	r3, [r2, #28]
 8001248:	4b20      	ldr	r3, [pc, #128]	; (80012cc <HAL_RCC_OscConfig+0x934>)
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001254:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800125e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001262:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001264:	2301      	movs	r3, #1
 8001266:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_RCC_OscConfig+0x93c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001272:	2b00      	cmp	r3, #0
 8001274:	d11a      	bne.n	80012ac <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_RCC_OscConfig+0x93c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <HAL_RCC_OscConfig+0x93c>)
 800127c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001280:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001282:	f7ff f8e1 	bl	8000448 <HAL_GetTick>
 8001286:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128a:	e009      	b.n	80012a0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800128c:	f7ff f8dc 	bl	8000448 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b64      	cmp	r3, #100	; 0x64
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e3b1      	b.n	8001a04 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HAL_RCC_OscConfig+0x93c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0ef      	beq.n	800128c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d10d      	bne.n	80012d8 <HAL_RCC_OscConfig+0x940>
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <HAL_RCC_OscConfig+0x934>)
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	4a02      	ldr	r2, [pc, #8]	; (80012cc <HAL_RCC_OscConfig+0x934>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6213      	str	r3, [r2, #32]
 80012c8:	e03c      	b.n	8001344 <HAL_RCC_OscConfig+0x9ac>
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000
 80012d0:	10908120 	.word	0x10908120
 80012d4:	40007000 	.word	0x40007000
 80012d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10c      	bne.n	8001302 <HAL_RCC_OscConfig+0x96a>
 80012e8:	4bc1      	ldr	r3, [pc, #772]	; (80015f0 <HAL_RCC_OscConfig+0xc58>)
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	4ac0      	ldr	r2, [pc, #768]	; (80015f0 <HAL_RCC_OscConfig+0xc58>)
 80012ee:	f023 0301 	bic.w	r3, r3, #1
 80012f2:	6213      	str	r3, [r2, #32]
 80012f4:	4bbe      	ldr	r3, [pc, #760]	; (80015f0 <HAL_RCC_OscConfig+0xc58>)
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	4abd      	ldr	r2, [pc, #756]	; (80015f0 <HAL_RCC_OscConfig+0xc58>)
 80012fa:	f023 0304 	bic.w	r3, r3, #4
 80012fe:	6213      	str	r3, [r2, #32]
 8001300:	e020      	b.n	8001344 <HAL_RCC_OscConfig+0x9ac>
 8001302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001306:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2b05      	cmp	r3, #5
 8001310:	d10c      	bne.n	800132c <HAL_RCC_OscConfig+0x994>
 8001312:	4bb7      	ldr	r3, [pc, #732]	; (80015f0 <HAL_RCC_OscConfig+0xc58>)
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	4ab6      	ldr	r2, [pc, #728]	; (80015f0 <HAL_RCC_OscConfig+0xc58>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6213      	str	r3, [r2, #32]
 800131e:	4bb4      	ldr	r3, [pc, #720]	; (80015f0 <HAL_RCC_OscConfig+0xc58>)
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	4ab3      	ldr	r2, [pc, #716]	; (80015f0 <HAL_RCC_OscConfig+0xc58>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6213      	str	r3, [r2, #32]
 800132a:	e00b      	b.n	8001344 <HAL_RCC_OscConfig+0x9ac>
 800132c:	4bb0      	ldr	r3, [pc, #704]	; (80015f0 <HAL_RCC_OscConfig+0xc58>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	4aaf      	ldr	r2, [pc, #700]	; (80015f0 <HAL_RCC_OscConfig+0xc58>)
 8001332:	f023 0301 	bic.w	r3, r3, #1
 8001336:	6213      	str	r3, [r2, #32]
 8001338:	4bad      	ldr	r3, [pc, #692]	; (80015f0 <HAL_RCC_OscConfig+0xc58>)
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	4aac      	ldr	r2, [pc, #688]	; (80015f0 <HAL_RCC_OscConfig+0xc58>)
 800133e:	f023 0304 	bic.w	r3, r3, #4
 8001342:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001348:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 8081 	beq.w	8001458 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001356:	f7ff f877 	bl	8000448 <HAL_GetTick>
 800135a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135e:	e00b      	b.n	8001378 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001360:	f7ff f872 	bl	8000448 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001370:	4293      	cmp	r3, r2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e345      	b.n	8001a04 <HAL_RCC_OscConfig+0x106c>
 8001378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001380:	2202      	movs	r2, #2
 8001382:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001388:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	fa93 f2a3 	rbit	r2, r3
 8001392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001396:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80013a4:	2202      	movs	r2, #2
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	fa93 f2a3 	rbit	r2, r3
 80013b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80013be:	601a      	str	r2, [r3, #0]
  return result;
 80013c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80013c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ca:	fab3 f383 	clz	r3, r3
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	095b      	lsrs	r3, r3, #5
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d102      	bne.n	80013e4 <HAL_RCC_OscConfig+0xa4c>
 80013de:	4b84      	ldr	r3, [pc, #528]	; (80015f0 <HAL_RCC_OscConfig+0xc58>)
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	e013      	b.n	800140c <HAL_RCC_OscConfig+0xa74>
 80013e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80013ec:	2202      	movs	r2, #2
 80013ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	fa93 f2a3 	rbit	r2, r3
 80013fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001402:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	4b79      	ldr	r3, [pc, #484]	; (80015f0 <HAL_RCC_OscConfig+0xc58>)
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001410:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001414:	2102      	movs	r1, #2
 8001416:	6011      	str	r1, [r2, #0]
 8001418:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800141c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	fa92 f1a2 	rbit	r1, r2
 8001426:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800142a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800142e:	6011      	str	r1, [r2, #0]
  return result;
 8001430:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001434:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	fab2 f282 	clz	r2, r2
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	f002 021f 	and.w	r2, r2, #31
 800144a:	2101      	movs	r1, #1
 800144c:	fa01 f202 	lsl.w	r2, r1, r2
 8001450:	4013      	ands	r3, r2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d084      	beq.n	8001360 <HAL_RCC_OscConfig+0x9c8>
 8001456:	e07f      	b.n	8001558 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001458:	f7fe fff6 	bl	8000448 <HAL_GetTick>
 800145c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001460:	e00b      	b.n	800147a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001462:	f7fe fff1 	bl	8000448 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001472:	4293      	cmp	r3, r2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e2c4      	b.n	8001a04 <HAL_RCC_OscConfig+0x106c>
 800147a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001482:	2202      	movs	r2, #2
 8001484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	fa93 f2a3 	rbit	r2, r3
 8001494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001498:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80014a6:	2202      	movs	r2, #2
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	fa93 f2a3 	rbit	r2, r3
 80014b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014bc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80014c0:	601a      	str	r2, [r3, #0]
  return result;
 80014c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80014ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014cc:	fab3 f383 	clz	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f043 0302 	orr.w	r3, r3, #2
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d102      	bne.n	80014e6 <HAL_RCC_OscConfig+0xb4e>
 80014e0:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <HAL_RCC_OscConfig+0xc58>)
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	e013      	b.n	800150e <HAL_RCC_OscConfig+0xb76>
 80014e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80014ee:	2202      	movs	r2, #2
 80014f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	fa93 f2a3 	rbit	r2, r3
 8001500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001504:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <HAL_RCC_OscConfig+0xc58>)
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001512:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001516:	2102      	movs	r1, #2
 8001518:	6011      	str	r1, [r2, #0]
 800151a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800151e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	fa92 f1a2 	rbit	r1, r2
 8001528:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800152c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001530:	6011      	str	r1, [r2, #0]
  return result;
 8001532:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001536:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	fab2 f282 	clz	r2, r2
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	f002 021f 	and.w	r2, r2, #31
 800154c:	2101      	movs	r1, #1
 800154e:	fa01 f202 	lsl.w	r2, r1, r2
 8001552:	4013      	ands	r3, r2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d184      	bne.n	8001462 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001558:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <HAL_RCC_OscConfig+0xc58>)
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	4a22      	ldr	r2, [pc, #136]	; (80015f0 <HAL_RCC_OscConfig+0xc58>)
 8001566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800156a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001570:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 8242 	beq.w	8001a02 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <HAL_RCC_OscConfig+0xc58>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b08      	cmp	r3, #8
 8001588:	f000 8213 	beq.w	80019b2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800158c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001590:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	2b02      	cmp	r3, #2
 800159a:	f040 8162 	bne.w	8001862 <HAL_RCC_OscConfig+0xeca>
 800159e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80015a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	fa93 f2a3 	rbit	r2, r3
 80015ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015be:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80015c2:	601a      	str	r2, [r3, #0]
  return result;
 80015c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80015cc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ce:	fab3 f383 	clz	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	461a      	mov	r2, r3
 80015e0:	2300      	movs	r3, #0
 80015e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7fe ff30 	bl	8000448 <HAL_GetTick>
 80015e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ec:	e00c      	b.n	8001608 <HAL_RCC_OscConfig+0xc70>
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f4:	f7fe ff28 	bl	8000448 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e1fd      	b.n	8001a04 <HAL_RCC_OscConfig+0x106c>
 8001608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001610:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	fa93 f2a3 	rbit	r2, r3
 8001624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001628:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800162c:	601a      	str	r2, [r3, #0]
  return result;
 800162e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001632:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001636:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001638:	fab3 f383 	clz	r3, r3
 800163c:	b2db      	uxtb	r3, r3
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	b2db      	uxtb	r3, r3
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b01      	cmp	r3, #1
 800164a:	d102      	bne.n	8001652 <HAL_RCC_OscConfig+0xcba>
 800164c:	4bb0      	ldr	r3, [pc, #704]	; (8001910 <HAL_RCC_OscConfig+0xf78>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	e027      	b.n	80016a2 <HAL_RCC_OscConfig+0xd0a>
 8001652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001656:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800165a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800165e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001664:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	fa93 f2a3 	rbit	r2, r3
 800166e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001672:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001680:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	fa93 f2a3 	rbit	r2, r3
 8001694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001698:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	4b9c      	ldr	r3, [pc, #624]	; (8001910 <HAL_RCC_OscConfig+0xf78>)
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016a6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80016aa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80016ae:	6011      	str	r1, [r2, #0]
 80016b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016b4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	fa92 f1a2 	rbit	r1, r2
 80016be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016c2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80016c6:	6011      	str	r1, [r2, #0]
  return result;
 80016c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80016cc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	fab2 f282 	clz	r2, r2
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	f042 0220 	orr.w	r2, r2, #32
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	f002 021f 	and.w	r2, r2, #31
 80016e2:	2101      	movs	r1, #1
 80016e4:	fa01 f202 	lsl.w	r2, r1, r2
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d182      	bne.n	80015f4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ee:	4b88      	ldr	r3, [pc, #544]	; (8001910 <HAL_RCC_OscConfig+0xf78>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001706:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	430b      	orrs	r3, r1
 8001710:	497f      	ldr	r1, [pc, #508]	; (8001910 <HAL_RCC_OscConfig+0xf78>)
 8001712:	4313      	orrs	r3, r2
 8001714:	604b      	str	r3, [r1, #4]
 8001716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800171e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001722:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001728:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	fa93 f2a3 	rbit	r2, r3
 8001732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001736:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800173a:	601a      	str	r2, [r3, #0]
  return result;
 800173c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001740:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001744:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001750:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	461a      	mov	r2, r3
 8001758:	2301      	movs	r3, #1
 800175a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7fe fe74 	bl	8000448 <HAL_GetTick>
 8001760:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001764:	e009      	b.n	800177a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001766:	f7fe fe6f 	bl	8000448 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e144      	b.n	8001a04 <HAL_RCC_OscConfig+0x106c>
 800177a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001782:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	fa93 f2a3 	rbit	r2, r3
 8001796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800179a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800179e:	601a      	str	r2, [r3, #0]
  return result;
 80017a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80017a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017aa:	fab3 f383 	clz	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	095b      	lsrs	r3, r3, #5
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d102      	bne.n	80017c4 <HAL_RCC_OscConfig+0xe2c>
 80017be:	4b54      	ldr	r3, [pc, #336]	; (8001910 <HAL_RCC_OscConfig+0xf78>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	e027      	b.n	8001814 <HAL_RCC_OscConfig+0xe7c>
 80017c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80017cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	fa93 f2a3 	rbit	r2, r3
 80017e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ee:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80017f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	fa93 f2a3 	rbit	r2, r3
 8001806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	4b3f      	ldr	r3, [pc, #252]	; (8001910 <HAL_RCC_OscConfig+0xf78>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001818:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800181c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001820:	6011      	str	r1, [r2, #0]
 8001822:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001826:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	fa92 f1a2 	rbit	r1, r2
 8001830:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001834:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001838:	6011      	str	r1, [r2, #0]
  return result;
 800183a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800183e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	fab2 f282 	clz	r2, r2
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	f042 0220 	orr.w	r2, r2, #32
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	f002 021f 	and.w	r2, r2, #31
 8001854:	2101      	movs	r1, #1
 8001856:	fa01 f202 	lsl.w	r2, r1, r2
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d082      	beq.n	8001766 <HAL_RCC_OscConfig+0xdce>
 8001860:	e0cf      	b.n	8001a02 <HAL_RCC_OscConfig+0x106a>
 8001862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001866:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800186a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800186e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001874:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	fa93 f2a3 	rbit	r2, r3
 800187e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001882:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001886:	601a      	str	r2, [r3, #0]
  return result;
 8001888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001890:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001892:	fab3 f383 	clz	r3, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800189c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	461a      	mov	r2, r3
 80018a4:	2300      	movs	r3, #0
 80018a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7fe fdce 	bl	8000448 <HAL_GetTick>
 80018ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b0:	e009      	b.n	80018c6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b2:	f7fe fdc9 	bl	8000448 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e09e      	b.n	8001a04 <HAL_RCC_OscConfig+0x106c>
 80018c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ca:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80018ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	fa93 f2a3 	rbit	r2, r3
 80018e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80018ea:	601a      	str	r2, [r3, #0]
  return result;
 80018ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80018f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	095b      	lsrs	r3, r3, #5
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b01      	cmp	r3, #1
 8001908:	d104      	bne.n	8001914 <HAL_RCC_OscConfig+0xf7c>
 800190a:	4b01      	ldr	r3, [pc, #4]	; (8001910 <HAL_RCC_OscConfig+0xf78>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	e029      	b.n	8001964 <HAL_RCC_OscConfig+0xfcc>
 8001910:	40021000 	.word	0x40021000
 8001914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001918:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800191c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001926:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	fa93 f2a3 	rbit	r2, r3
 8001930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001934:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001942:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800194c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	fa93 f2a3 	rbit	r2, r3
 8001956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	4b2b      	ldr	r3, [pc, #172]	; (8001a10 <HAL_RCC_OscConfig+0x1078>)
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001968:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800196c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001970:	6011      	str	r1, [r2, #0]
 8001972:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001976:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	fa92 f1a2 	rbit	r1, r2
 8001980:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001984:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001988:	6011      	str	r1, [r2, #0]
  return result;
 800198a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800198e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	fab2 f282 	clz	r2, r2
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	f042 0220 	orr.w	r2, r2, #32
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	f002 021f 	and.w	r2, r2, #31
 80019a4:	2101      	movs	r1, #1
 80019a6:	fa01 f202 	lsl.w	r2, r1, r2
 80019aa:	4013      	ands	r3, r2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d180      	bne.n	80018b2 <HAL_RCC_OscConfig+0xf1a>
 80019b0:	e027      	b.n	8001a02 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e01e      	b.n	8001a04 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_RCC_OscConfig+0x1078>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80019d2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d10b      	bne.n	80019fe <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80019e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80019ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000

08001a14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b09e      	sub	sp, #120	; 0x78
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e162      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b90      	ldr	r3, [pc, #576]	; (8001c70 <HAL_RCC_ClockConfig+0x25c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d910      	bls.n	8001a5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b8d      	ldr	r3, [pc, #564]	; (8001c70 <HAL_RCC_ClockConfig+0x25c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 0207 	bic.w	r2, r3, #7
 8001a42:	498b      	ldr	r1, [pc, #556]	; (8001c70 <HAL_RCC_ClockConfig+0x25c>)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b89      	ldr	r3, [pc, #548]	; (8001c70 <HAL_RCC_ClockConfig+0x25c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e14a      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a68:	4b82      	ldr	r3, [pc, #520]	; (8001c74 <HAL_RCC_ClockConfig+0x260>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	497f      	ldr	r1, [pc, #508]	; (8001c74 <HAL_RCC_ClockConfig+0x260>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80dc 	beq.w	8001c40 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d13c      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xf6>
 8001a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa0:	fab3 f383 	clz	r3, r3
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	095b      	lsrs	r3, r3, #5
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d102      	bne.n	8001aba <HAL_RCC_ClockConfig+0xa6>
 8001ab4:	4b6f      	ldr	r3, [pc, #444]	; (8001c74 <HAL_RCC_ClockConfig+0x260>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	e00f      	b.n	8001ada <HAL_RCC_ClockConfig+0xc6>
 8001aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001abe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	667b      	str	r3, [r7, #100]	; 0x64
 8001ac8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001acc:	663b      	str	r3, [r7, #96]	; 0x60
 8001ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ad0:	fa93 f3a3 	rbit	r3, r3
 8001ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ad6:	4b67      	ldr	r3, [pc, #412]	; (8001c74 <HAL_RCC_ClockConfig+0x260>)
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ade:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ae0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ae2:	fa92 f2a2 	rbit	r2, r2
 8001ae6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ae8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001aea:	fab2 f282 	clz	r2, r2
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	f042 0220 	orr.w	r2, r2, #32
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	f002 021f 	and.w	r2, r2, #31
 8001afa:	2101      	movs	r1, #1
 8001afc:	fa01 f202 	lsl.w	r2, r1, r2
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d17b      	bne.n	8001bfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e0f3      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d13c      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x178>
 8001b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b22:	fab3 f383 	clz	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	095b      	lsrs	r3, r3, #5
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d102      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x128>
 8001b36:	4b4f      	ldr	r3, [pc, #316]	; (8001c74 <HAL_RCC_ClockConfig+0x260>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	e00f      	b.n	8001b5c <HAL_RCC_ClockConfig+0x148>
 8001b3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	647b      	str	r3, [r7, #68]	; 0x44
 8001b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b4e:	643b      	str	r3, [r7, #64]	; 0x40
 8001b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b58:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <HAL_RCC_ClockConfig+0x260>)
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b60:	63ba      	str	r2, [r7, #56]	; 0x38
 8001b62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b64:	fa92 f2a2 	rbit	r2, r2
 8001b68:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b6c:	fab2 f282 	clz	r2, r2
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	f042 0220 	orr.w	r2, r2, #32
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	f002 021f 	and.w	r2, r2, #31
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d13a      	bne.n	8001bfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0b2      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x2de>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b92:	fa93 f3a3 	rbit	r3, r3
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	095b      	lsrs	r3, r3, #5
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d102      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x1a0>
 8001bae:	4b31      	ldr	r3, [pc, #196]	; (8001c74 <HAL_RCC_ClockConfig+0x260>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	e00d      	b.n	8001bd0 <HAL_RCC_ClockConfig+0x1bc>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bba:	fa93 f3a3 	rbit	r3, r3
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	623b      	str	r3, [r7, #32]
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	fa93 f3a3 	rbit	r3, r3
 8001bca:	61fb      	str	r3, [r7, #28]
 8001bcc:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <HAL_RCC_ClockConfig+0x260>)
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	61ba      	str	r2, [r7, #24]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	fa92 f2a2 	rbit	r2, r2
 8001bda:	617a      	str	r2, [r7, #20]
  return result;
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	fab2 f282 	clz	r2, r2
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	f042 0220 	orr.w	r2, r2, #32
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	f002 021f 	and.w	r2, r2, #31
 8001bee:	2101      	movs	r1, #1
 8001bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e079      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <HAL_RCC_ClockConfig+0x260>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f023 0203 	bic.w	r2, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	491a      	ldr	r1, [pc, #104]	; (8001c74 <HAL_RCC_ClockConfig+0x260>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c10:	f7fe fc1a 	bl	8000448 <HAL_GetTick>
 8001c14:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c18:	f7fe fc16 	bl	8000448 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e061      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_RCC_ClockConfig+0x260>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 020c 	and.w	r2, r3, #12
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d1eb      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <HAL_RCC_ClockConfig+0x25c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d214      	bcs.n	8001c78 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <HAL_RCC_ClockConfig+0x25c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 0207 	bic.w	r2, r3, #7
 8001c56:	4906      	ldr	r1, [pc, #24]	; (8001c70 <HAL_RCC_ClockConfig+0x25c>)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <HAL_RCC_ClockConfig+0x25c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e040      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x2de>
 8001c70:	40022000 	.word	0x40022000
 8001c74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c84:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <HAL_RCC_ClockConfig+0x2e8>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	491a      	ldr	r1, [pc, #104]	; (8001cfc <HAL_RCC_ClockConfig+0x2e8>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d009      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ca2:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <HAL_RCC_ClockConfig+0x2e8>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4912      	ldr	r1, [pc, #72]	; (8001cfc <HAL_RCC_ClockConfig+0x2e8>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cb6:	f000 f829 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8001cba:	4601      	mov	r1, r0
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <HAL_RCC_ClockConfig+0x2e8>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cc4:	22f0      	movs	r2, #240	; 0xf0
 8001cc6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	fa92 f2a2 	rbit	r2, r2
 8001cce:	60fa      	str	r2, [r7, #12]
  return result;
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	fab2 f282 	clz	r2, r2
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	40d3      	lsrs	r3, r2
 8001cda:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <HAL_RCC_ClockConfig+0x2ec>)
 8001cdc:	5cd3      	ldrb	r3, [r2, r3]
 8001cde:	fa21 f303 	lsr.w	r3, r1, r3
 8001ce2:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <HAL_RCC_ClockConfig+0x2f0>)
 8001ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_RCC_ClockConfig+0x2f4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fb68 	bl	80003c0 <HAL_InitTick>
  
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3778      	adds	r7, #120	; 0x78
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	0800267c 	.word	0x0800267c
 8001d04:	20000008 	.word	0x20000008
 8001d08:	20000000 	.word	0x20000000

08001d0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b08b      	sub	sp, #44	; 0x2c
 8001d10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001d26:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d002      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x30>
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d003      	beq.n	8001d42 <HAL_RCC_GetSysClockFreq+0x36>
 8001d3a:	e03c      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d3e:	623b      	str	r3, [r7, #32]
      break;
 8001d40:	e03c      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d48:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001d4c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	fa92 f2a2 	rbit	r2, r2
 8001d54:	607a      	str	r2, [r7, #4]
  return result;
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	fab2 f282 	clz	r2, r2
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	40d3      	lsrs	r3, r2
 8001d60:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d62:	5cd3      	ldrb	r3, [r2, r3]
 8001d64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001d66:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	220f      	movs	r2, #15
 8001d70:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	fa92 f2a2 	rbit	r2, r2
 8001d78:	60fa      	str	r2, [r7, #12]
  return result;
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	fab2 f282 	clz	r2, r2
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	40d3      	lsrs	r3, r2
 8001d84:	4a14      	ldr	r2, [pc, #80]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001d86:	5cd3      	ldrb	r3, [r2, r3]
 8001d88:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d94:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fb02 f303 	mul.w	r3, r2, r3
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
 8001da4:	e004      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	4a0c      	ldr	r2, [pc, #48]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xd0>)
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	623b      	str	r3, [r7, #32]
      break;
 8001db4:	e002      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001db8:	623b      	str	r3, [r7, #32]
      break;
 8001dba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	372c      	adds	r7, #44	; 0x2c
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	007a1200 	.word	0x007a1200
 8001dd4:	0800265c 	.word	0x0800265c
 8001dd8:	0800266c 	.word	0x0800266c
 8001ddc:	003d0900 	.word	0x003d0900

08001de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000008 	.word	0x20000008

08001df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001dfe:	f7ff ffef 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e02:	4601      	mov	r1, r0
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e0c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	fa92 f2a2 	rbit	r2, r2
 8001e18:	603a      	str	r2, [r7, #0]
  return result;
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	fab2 f282 	clz	r2, r2
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	40d3      	lsrs	r3, r2
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001e26:	5cd3      	ldrb	r3, [r2, r3]
 8001e28:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000
 8001e38:	0800268c 	.word	0x0800268c

08001e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001e42:	f7ff ffcd 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e46:	4601      	mov	r1, r0
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001e50:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001e54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	fa92 f2a2 	rbit	r2, r2
 8001e5c:	603a      	str	r2, [r7, #0]
  return result;
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	fab2 f282 	clz	r2, r2
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	40d3      	lsrs	r3, r2
 8001e68:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <HAL_RCC_GetPCLK2Freq+0x40>)
 8001e6a:	5cd3      	ldrb	r3, [r2, r3]
 8001e6c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	0800268c 	.word	0x0800268c

08001e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e040      	b.n	8001f14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d106      	bne.n	8001ea8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fb4a 	bl	800253c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2224      	movs	r2, #36	; 0x24
 8001eac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0201 	bic.w	r2, r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f82c 	bl	8001f1c <UART_SetConfig>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e022      	b.n	8001f14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f956 	bl	8002188 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001efa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f9dd 	bl	80022cc <UART_CheckIdleState>
 8001f12:	4603      	mov	r3, r0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b8a      	ldr	r3, [pc, #552]	; (8002170 <UART_SetConfig+0x254>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	6979      	ldr	r1, [r7, #20]
 8001f50:	430b      	orrs	r3, r1
 8001f52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a78      	ldr	r2, [pc, #480]	; (8002174 <UART_SetConfig+0x258>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d120      	bne.n	8001fda <UART_SetConfig+0xbe>
 8001f98:	4b77      	ldr	r3, [pc, #476]	; (8002178 <UART_SetConfig+0x25c>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d817      	bhi.n	8001fd4 <UART_SetConfig+0xb8>
 8001fa4:	a201      	add	r2, pc, #4	; (adr r2, 8001fac <UART_SetConfig+0x90>)
 8001fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001faa:	bf00      	nop
 8001fac:	08001fbd 	.word	0x08001fbd
 8001fb0:	08001fc9 	.word	0x08001fc9
 8001fb4:	08001fcf 	.word	0x08001fcf
 8001fb8:	08001fc3 	.word	0x08001fc3
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	77fb      	strb	r3, [r7, #31]
 8001fc0:	e01d      	b.n	8001ffe <UART_SetConfig+0xe2>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	77fb      	strb	r3, [r7, #31]
 8001fc6:	e01a      	b.n	8001ffe <UART_SetConfig+0xe2>
 8001fc8:	2304      	movs	r3, #4
 8001fca:	77fb      	strb	r3, [r7, #31]
 8001fcc:	e017      	b.n	8001ffe <UART_SetConfig+0xe2>
 8001fce:	2308      	movs	r3, #8
 8001fd0:	77fb      	strb	r3, [r7, #31]
 8001fd2:	e014      	b.n	8001ffe <UART_SetConfig+0xe2>
 8001fd4:	2310      	movs	r3, #16
 8001fd6:	77fb      	strb	r3, [r7, #31]
 8001fd8:	e011      	b.n	8001ffe <UART_SetConfig+0xe2>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a67      	ldr	r2, [pc, #412]	; (800217c <UART_SetConfig+0x260>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d102      	bne.n	8001fea <UART_SetConfig+0xce>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	77fb      	strb	r3, [r7, #31]
 8001fe8:	e009      	b.n	8001ffe <UART_SetConfig+0xe2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a64      	ldr	r2, [pc, #400]	; (8002180 <UART_SetConfig+0x264>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d102      	bne.n	8001ffa <UART_SetConfig+0xde>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	77fb      	strb	r3, [r7, #31]
 8001ff8:	e001      	b.n	8001ffe <UART_SetConfig+0xe2>
 8001ffa:	2310      	movs	r3, #16
 8001ffc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002006:	d15b      	bne.n	80020c0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8002008:	7ffb      	ldrb	r3, [r7, #31]
 800200a:	2b08      	cmp	r3, #8
 800200c:	d827      	bhi.n	800205e <UART_SetConfig+0x142>
 800200e:	a201      	add	r2, pc, #4	; (adr r2, 8002014 <UART_SetConfig+0xf8>)
 8002010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002014:	08002039 	.word	0x08002039
 8002018:	08002041 	.word	0x08002041
 800201c:	08002049 	.word	0x08002049
 8002020:	0800205f 	.word	0x0800205f
 8002024:	0800204f 	.word	0x0800204f
 8002028:	0800205f 	.word	0x0800205f
 800202c:	0800205f 	.word	0x0800205f
 8002030:	0800205f 	.word	0x0800205f
 8002034:	08002057 	.word	0x08002057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002038:	f7ff fede 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 800203c:	61b8      	str	r0, [r7, #24]
        break;
 800203e:	e013      	b.n	8002068 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002040:	f7ff fefc 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 8002044:	61b8      	str	r0, [r7, #24]
        break;
 8002046:	e00f      	b.n	8002068 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002048:	4b4e      	ldr	r3, [pc, #312]	; (8002184 <UART_SetConfig+0x268>)
 800204a:	61bb      	str	r3, [r7, #24]
        break;
 800204c:	e00c      	b.n	8002068 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800204e:	f7ff fe5d 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8002052:	61b8      	str	r0, [r7, #24]
        break;
 8002054:	e008      	b.n	8002068 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800205a:	61bb      	str	r3, [r7, #24]
        break;
 800205c:	e004      	b.n	8002068 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	77bb      	strb	r3, [r7, #30]
        break;
 8002066:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d074      	beq.n	8002158 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	005a      	lsls	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	085b      	lsrs	r3, r3, #1
 8002078:	441a      	add	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002082:	b29b      	uxth	r3, r3
 8002084:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	2b0f      	cmp	r3, #15
 800208a:	d916      	bls.n	80020ba <UART_SetConfig+0x19e>
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002092:	d212      	bcs.n	80020ba <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	b29b      	uxth	r3, r3
 8002098:	f023 030f 	bic.w	r3, r3, #15
 800209c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	085b      	lsrs	r3, r3, #1
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	89fb      	ldrh	r3, [r7, #14]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	89fa      	ldrh	r2, [r7, #14]
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	e04e      	b.n	8002158 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	77bb      	strb	r3, [r7, #30]
 80020be:	e04b      	b.n	8002158 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80020c0:	7ffb      	ldrb	r3, [r7, #31]
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d827      	bhi.n	8002116 <UART_SetConfig+0x1fa>
 80020c6:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <UART_SetConfig+0x1b0>)
 80020c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020cc:	080020f1 	.word	0x080020f1
 80020d0:	080020f9 	.word	0x080020f9
 80020d4:	08002101 	.word	0x08002101
 80020d8:	08002117 	.word	0x08002117
 80020dc:	08002107 	.word	0x08002107
 80020e0:	08002117 	.word	0x08002117
 80020e4:	08002117 	.word	0x08002117
 80020e8:	08002117 	.word	0x08002117
 80020ec:	0800210f 	.word	0x0800210f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80020f0:	f7ff fe82 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 80020f4:	61b8      	str	r0, [r7, #24]
        break;
 80020f6:	e013      	b.n	8002120 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80020f8:	f7ff fea0 	bl	8001e3c <HAL_RCC_GetPCLK2Freq>
 80020fc:	61b8      	str	r0, [r7, #24]
        break;
 80020fe:	e00f      	b.n	8002120 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002100:	4b20      	ldr	r3, [pc, #128]	; (8002184 <UART_SetConfig+0x268>)
 8002102:	61bb      	str	r3, [r7, #24]
        break;
 8002104:	e00c      	b.n	8002120 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002106:	f7ff fe01 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 800210a:	61b8      	str	r0, [r7, #24]
        break;
 800210c:	e008      	b.n	8002120 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800210e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002112:	61bb      	str	r3, [r7, #24]
        break;
 8002114:	e004      	b.n	8002120 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	77bb      	strb	r3, [r7, #30]
        break;
 800211e:	bf00      	nop
    }

    if (pclk != 0U)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d018      	beq.n	8002158 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	085a      	lsrs	r2, r3, #1
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	441a      	add	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	fbb2 f3f3 	udiv	r3, r2, r3
 8002138:	b29b      	uxth	r3, r3
 800213a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	2b0f      	cmp	r3, #15
 8002140:	d908      	bls.n	8002154 <UART_SetConfig+0x238>
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002148:	d204      	bcs.n	8002154 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	e001      	b.n	8002158 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002164:	7fbb      	ldrb	r3, [r7, #30]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	efff69f3 	.word	0xefff69f3
 8002174:	40013800 	.word	0x40013800
 8002178:	40021000 	.word	0x40021000
 800217c:	40004400 	.word	0x40004400
 8002180:	40004800 	.word	0x40004800
 8002184:	007a1200 	.word	0x007a1200

08002188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	f003 0320 	and.w	r3, r3, #32
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002264:	2b00      	cmp	r3, #0
 8002266:	d01a      	beq.n	800229e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002286:	d10a      	bne.n	800229e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	605a      	str	r2, [r3, #4]
  }
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80022dc:	f7fe f8b4 	bl	8000448 <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d10e      	bne.n	800230e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f82d 	bl	800235e <UART_WaitOnFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e023      	b.n	8002356 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b04      	cmp	r3, #4
 800231a:	d10e      	bne.n	800233a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800231c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f817 	bl	800235e <UART_WaitOnFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e00d      	b.n	8002356 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2220      	movs	r2, #32
 800233e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2220      	movs	r2, #32
 8002344:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b09c      	sub	sp, #112	; 0x70
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	603b      	str	r3, [r7, #0]
 800236a:	4613      	mov	r3, r2
 800236c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800236e:	e0a5      	b.n	80024bc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002376:	f000 80a1 	beq.w	80024bc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237a:	f7fe f865 	bl	8000448 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002386:	429a      	cmp	r2, r3
 8002388:	d302      	bcc.n	8002390 <UART_WaitOnFlagUntilTimeout+0x32>
 800238a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800238c:	2b00      	cmp	r3, #0
 800238e:	d13e      	bne.n	800240e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002398:	e853 3f00 	ldrex	r3, [r3]
 800239c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800239e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80023a4:	667b      	str	r3, [r7, #100]	; 0x64
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80023b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80023b6:	e841 2300 	strex	r3, r2, [r1]
 80023ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80023bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1e6      	bne.n	8002390 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	3308      	adds	r3, #8
 80023c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023cc:	e853 3f00 	ldrex	r3, [r3]
 80023d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80023d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d4:	f023 0301 	bic.w	r3, r3, #1
 80023d8:	663b      	str	r3, [r7, #96]	; 0x60
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	3308      	adds	r3, #8
 80023e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80023e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80023e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023ea:	e841 2300 	strex	r3, r2, [r1]
 80023ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80023f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1e5      	bne.n	80023c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2220      	movs	r2, #32
 80023fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2220      	movs	r2, #32
 8002400:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e067      	b.n	80024de <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d04f      	beq.n	80024bc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800242a:	d147      	bne.n	80024bc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002434:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243e:	e853 3f00 	ldrex	r3, [r3]
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800244a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002454:	637b      	str	r3, [r7, #52]	; 0x34
 8002456:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002458:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800245a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800245c:	e841 2300 	strex	r3, r2, [r1]
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1e6      	bne.n	8002436 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	3308      	adds	r3, #8
 800246e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	e853 3f00 	ldrex	r3, [r3]
 8002476:	613b      	str	r3, [r7, #16]
   return(result);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f023 0301 	bic.w	r3, r3, #1
 800247e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	3308      	adds	r3, #8
 8002486:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002488:	623a      	str	r2, [r7, #32]
 800248a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248c:	69f9      	ldr	r1, [r7, #28]
 800248e:	6a3a      	ldr	r2, [r7, #32]
 8002490:	e841 2300 	strex	r3, r2, [r1]
 8002494:	61bb      	str	r3, [r7, #24]
   return(result);
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1e5      	bne.n	8002468 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2220      	movs	r2, #32
 80024a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e010      	b.n	80024de <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	69da      	ldr	r2, [r3, #28]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	4013      	ands	r3, r2
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	bf0c      	ite	eq
 80024cc:	2301      	moveq	r3, #1
 80024ce:	2300      	movne	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	f43f af4a 	beq.w	8002370 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3770      	adds	r7, #112	; 0x70
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <main>:
/* Main Include */
#include "main.h"

int main(void)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	af00      	add	r7, sp, #0
	/* Configure HAL Driver, MCU Clock, and MCU Peripherals */
	AppSystemConfig();
 80024ea:	f7fd fed5 	bl	8000298 <AppSystemConfig>

	/* Init App with default configuration */
	AppSystemDefault();
 80024ee:	f7fd fedf 	bl	80002b0 <AppSystemDefault>

    /* Loop forever */
	while(1)
 80024f2:	e7fe      	b.n	80024f2 <main+0xc>

080024f4 <HAL_MspInit>:
/* STM32F3xx HAL Driver Include */
#include "stm32f3xx_hal.h"

void HAL_MspInit(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fa:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <HAL_MspInit+0x44>)
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <HAL_MspInit+0x44>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6193      	str	r3, [r2, #24]
 8002506:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <HAL_MspInit+0x44>)
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_MspInit+0x44>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4a08      	ldr	r2, [pc, #32]	; (8002538 <HAL_MspInit+0x44>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	61d3      	str	r3, [r2, #28]
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_MspInit+0x44>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000

0800253c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a12      	ldr	r2, [pc, #72]	; (8002594 <HAL_UART_MspInit+0x58>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d11d      	bne.n	800258a <HAL_UART_MspInit+0x4e>
	{

		/* Enable UART2 and GPIOA Clock */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_UART_MspInit+0x5c>)
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	4a11      	ldr	r2, [pc, #68]	; (8002598 <HAL_UART_MspInit+0x5c>)
 8002554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002558:	6153      	str	r3, [r2, #20]
 800255a:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <HAL_UART_MspInit+0x5c>)
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]

		/* GPIO Configuration Structure */
		GPIO_InitTypeDef hgpio_uart2;

		hgpio_uart2.Pin			= GPIO_PIN_2 | GPIO_PIN_15;
 8002566:	f248 0304 	movw	r3, #32772	; 0x8004
 800256a:	60fb      	str	r3, [r7, #12]
		hgpio_uart2.Mode		= GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	613b      	str	r3, [r7, #16]
		hgpio_uart2.Pull		= GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
		hgpio_uart2.Speed		= GPIO_SPEED_FREQ_HIGH;
 8002574:	2303      	movs	r3, #3
 8002576:	61bb      	str	r3, [r7, #24]
		hgpio_uart2.Alternate	= GPIO_AF7_USART2;
 8002578:	2307      	movs	r3, #7
 800257a:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &hgpio_uart2);
 800257c:	f107 030c 	add.w	r3, r7, #12
 8002580:	4619      	mov	r1, r3
 8002582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002586:	f7fe f87d 	bl	8000684 <HAL_GPIO_Init>

	}

}
 800258a:	bf00      	nop
 800258c:	3720      	adds	r7, #32
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40004400 	.word	0x40004400
 8002598:	40021000 	.word	0x40021000

0800259c <SysTick_Handler>:

/*
 *
 */
void SysTick_Handler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80025a0:	f7fd ff3e 	bl	8000420 <HAL_IncTick>
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025a8:	480d      	ldr	r0, [pc, #52]	; (80025e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025b0:	480c      	ldr	r0, [pc, #48]	; (80025e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80025b2:	490d      	ldr	r1, [pc, #52]	; (80025e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025b4:	4a0d      	ldr	r2, [pc, #52]	; (80025ec <LoopForever+0xe>)
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b8:	e002      	b.n	80025c0 <LoopCopyDataInit>

080025ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025be:	3304      	adds	r3, #4

080025c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c4:	d3f9      	bcc.n	80025ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c6:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025c8:	4c0a      	ldr	r4, [pc, #40]	; (80025f4 <LoopForever+0x16>)
  movs r3, #0
 80025ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025cc:	e001      	b.n	80025d2 <LoopFillZerobss>

080025ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d0:	3204      	adds	r2, #4

080025d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d4:	d3fb      	bcc.n	80025ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025d6:	f000 f811 	bl	80025fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025da:	f7ff ff84 	bl	80024e6 <main>

080025de <LoopForever>:

LoopForever:
    b LoopForever
 80025de:	e7fe      	b.n	80025de <LoopForever>
  ldr   r0, =_estack
 80025e0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80025e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80025ec:	0800269c 	.word	0x0800269c
  ldr r2, =_sbss
 80025f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80025f4:	200000b0 	.word	0x200000b0

080025f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025f8:	e7fe      	b.n	80025f8 <ADC1_2_IRQHandler>
	...

080025fc <__libc_init_array>:
 80025fc:	b570      	push	{r4, r5, r6, lr}
 80025fe:	4d0d      	ldr	r5, [pc, #52]	; (8002634 <__libc_init_array+0x38>)
 8002600:	4c0d      	ldr	r4, [pc, #52]	; (8002638 <__libc_init_array+0x3c>)
 8002602:	1b64      	subs	r4, r4, r5
 8002604:	10a4      	asrs	r4, r4, #2
 8002606:	2600      	movs	r6, #0
 8002608:	42a6      	cmp	r6, r4
 800260a:	d109      	bne.n	8002620 <__libc_init_array+0x24>
 800260c:	4d0b      	ldr	r5, [pc, #44]	; (800263c <__libc_init_array+0x40>)
 800260e:	4c0c      	ldr	r4, [pc, #48]	; (8002640 <__libc_init_array+0x44>)
 8002610:	f000 f818 	bl	8002644 <_init>
 8002614:	1b64      	subs	r4, r4, r5
 8002616:	10a4      	asrs	r4, r4, #2
 8002618:	2600      	movs	r6, #0
 800261a:	42a6      	cmp	r6, r4
 800261c:	d105      	bne.n	800262a <__libc_init_array+0x2e>
 800261e:	bd70      	pop	{r4, r5, r6, pc}
 8002620:	f855 3b04 	ldr.w	r3, [r5], #4
 8002624:	4798      	blx	r3
 8002626:	3601      	adds	r6, #1
 8002628:	e7ee      	b.n	8002608 <__libc_init_array+0xc>
 800262a:	f855 3b04 	ldr.w	r3, [r5], #4
 800262e:	4798      	blx	r3
 8002630:	3601      	adds	r6, #1
 8002632:	e7f2      	b.n	800261a <__libc_init_array+0x1e>
 8002634:	08002694 	.word	0x08002694
 8002638:	08002694 	.word	0x08002694
 800263c:	08002694 	.word	0x08002694
 8002640:	08002698 	.word	0x08002698

08002644 <_init>:
 8002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002646:	bf00      	nop
 8002648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264a:	bc08      	pop	{r3}
 800264c:	469e      	mov	lr, r3
 800264e:	4770      	bx	lr

08002650 <_fini>:
 8002650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002652:	bf00      	nop
 8002654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002656:	bc08      	pop	{r3}
 8002658:	469e      	mov	lr, r3
 800265a:	4770      	bx	lr
